initSidebarItems({"enum":[["DeviceType","Device type represents the set of devices supported by TVM."],["Error",""],["NDArrayError",""]],"fn":[["version","Outputs the current TVM version."]],"macro":[["export_pass",""],["initialize","A macro for generating the correct TVM symbols for plugin loading."]],"mod":[["context",""],["errors",""],["function","This module provides an idiomatic Rust API for creating and working with TVM functions."],["ir",""],["module","Provides the [`Module`] type and methods for working with runtime TVM modules."],["ndarray","This module implements the [`NDArray`] type for working with TVM tensors or coverting from a Rust's ndarray to TVM `NDArray`."],["python",""],["runtime",""],["transform",""],["value","This module implements [`ArgValue`] and [`RetValue`] types and their conversions needed for the types used in frontend crate. `RetValue` is the owned version of `TVMPODValue`."]],"struct":[["Context",""],["DataType",""],["Function","Wrapper around TVM function handle which includes `is_global` indicating whether the function is global or not, and `is_cloned` showing not to drop a cloned function from Rust side. The value of these fields can be accessed through their respective methods."],["FunctionNotFoundError",""],["Module","Wrapper around TVM module handle which contains an entry function. The entry function can be applied to an imported module through `entry_func`."],["NDArray",""],["TypeMismatchError",""]]});