(function() {var implementors = {};
implementors["adler32"] = [{"text":"impl Clone for RollingAdler32","synthetic":false,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl Clone for Match","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for FullAcAutomaton&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for AcAutomaton&lt;P, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Dense","synthetic":false,"types":[]},{"text":"impl Clone for Sparse","synthetic":false,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Clone for Prefix","synthetic":false,"types":[]},{"text":"impl Clone for Infix","synthetic":false,"types":[]},{"text":"impl Clone for Suffix","synthetic":false,"types":[]},{"text":"impl Clone for Style","synthetic":false,"types":[]},{"text":"impl Clone for Colour","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + ToOwned + ?Sized&gt; Clone for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["anyhow"] = [{"text":"impl&lt;'a&gt; Clone for Chain&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Clone for Stream","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Clone for AppSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Clone for App&lt;'a, 'b&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Clone for Arg&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArgMatches&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Values&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for OsValues&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArgGroup&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ArgSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SubCommand&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Shell","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Clone for Hasher","synthetic":false,"types":[]}];
implementors["egg"] = [{"text":"impl&lt;L:&nbsp;Clone, D:&nbsp;Clone&gt; Clone for EClass&lt;L, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone + Language, N:&nbsp;Clone + Analysis&lt;L&gt;&gt; Clone for EGraph&lt;L, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Data: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone&gt; Clone for RecExpr&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SymbolLang","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone&gt; Clone for Pattern&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone&gt; Clone for ENodeOrVar&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone, N:&nbsp;Clone&gt; Clone for Rewrite&lt;L, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Clone, A:&nbsp;Clone&gt; Clone for ConditionalApplier&lt;C, A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for StopReason","synthetic":false,"types":[]},{"text":"impl&lt;IterData:&nbsp;Clone&gt; Clone for Iteration&lt;IterData&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Var","synthetic":false,"types":[]},{"text":"impl Clone for Subst","synthetic":false,"types":[]},{"text":"impl Clone for Symbol","synthetic":false,"types":[]},{"text":"impl Clone for Id","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["env_logger"] = [{"text":"impl Clone for Style","synthetic":false,"types":[]},{"text":"impl Clone for Color","synthetic":false,"types":[]},{"text":"impl Clone for Target","synthetic":false,"types":[]},{"text":"impl Clone for WriteStyle","synthetic":false,"types":[]},{"text":"impl Clone for TimestampPrecision","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl Clone for GzHeader","synthetic":false,"types":[]},{"text":"impl Clone for FlushCompress","synthetic":false,"types":[]},{"text":"impl Clone for FlushDecompress","synthetic":false,"types":[]},{"text":"impl Clone for Status","synthetic":false,"types":[]},{"text":"impl Clone for Compression","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["glenside"] = [{"text":"impl Clone for Language","synthetic":false,"types":[]},{"text":"impl Clone for ComputeType","synthetic":false,"types":[]},{"text":"impl Clone for PadType","synthetic":false,"types":[]},{"text":"impl Clone for MyAnalysisData","synthetic":false,"types":[]},{"text":"impl Clone for ShapeData","synthetic":false,"types":[]},{"text":"impl Clone for AccessPatternData","synthetic":false,"types":[]},{"text":"impl Clone for MyAnalysisDataLegacyData","synthetic":false,"types":[]},{"text":"impl Clone for PadLocation","synthetic":false,"types":[]}];
implementors["goblin"] = [{"text":"impl Clone for Container","synthetic":false,"types":[]},{"text":"impl Clone for Ctx","synthetic":false,"types":[]},{"text":"impl Clone for CompressionHeader","synthetic":false,"types":[]},{"text":"impl Clone for CompressionHeader","synthetic":false,"types":[]},{"text":"impl Clone for CompressionHeader","synthetic":false,"types":[]},{"text":"impl Clone for Header","synthetic":false,"types":[]},{"text":"impl Clone for Header","synthetic":false,"types":[]},{"text":"impl Clone for Header","synthetic":false,"types":[]},{"text":"impl Clone for ProgramHeader","synthetic":false,"types":[]},{"text":"impl Clone for ProgramHeader","synthetic":false,"types":[]},{"text":"impl Clone for ProgramHeader","synthetic":false,"types":[]},{"text":"impl Clone for SectionHeader","synthetic":false,"types":[]},{"text":"impl Clone for SectionHeader","synthetic":false,"types":[]},{"text":"impl Clone for SectionHeader","synthetic":false,"types":[]},{"text":"impl Clone for Sym","synthetic":false,"types":[]},{"text":"impl Clone for Sym","synthetic":false,"types":[]},{"text":"impl Clone for Sym","synthetic":false,"types":[]},{"text":"impl Clone for Dyn","synthetic":false,"types":[]},{"text":"impl Clone for Dyn","synthetic":false,"types":[]},{"text":"impl Clone for Dyn","synthetic":false,"types":[]},{"text":"impl Clone for Rela","synthetic":false,"types":[]},{"text":"impl Clone for Rel","synthetic":false,"types":[]},{"text":"impl Clone for Rela","synthetic":false,"types":[]},{"text":"impl Clone for Rel","synthetic":false,"types":[]},{"text":"impl Clone for Reloc","synthetic":false,"types":[]},{"text":"impl Clone for Nhdr32","synthetic":false,"types":[]},{"text":"impl Clone for Nhdr64","synthetic":false,"types":[]},{"text":"impl Clone for FatHeader","synthetic":false,"types":[]},{"text":"impl Clone for FatArch","synthetic":false,"types":[]},{"text":"impl Clone for Header32","synthetic":false,"types":[]},{"text":"impl Clone for Header64","synthetic":false,"types":[]},{"text":"impl Clone for Header","synthetic":false,"types":[]},{"text":"impl Clone for LoadCommandHeader","synthetic":false,"types":[]},{"text":"impl Clone for Section32","synthetic":false,"types":[]},{"text":"impl Clone for Section64","synthetic":false,"types":[]},{"text":"impl Clone for SegmentCommand32","synthetic":false,"types":[]},{"text":"impl Clone for SegmentCommand64","synthetic":false,"types":[]},{"text":"impl Clone for Fvmlib","synthetic":false,"types":[]},{"text":"impl Clone for FvmlibCommand","synthetic":false,"types":[]},{"text":"impl Clone for Dylib","synthetic":false,"types":[]},{"text":"impl Clone for DylibCommand","synthetic":false,"types":[]},{"text":"impl Clone for SubFrameworkCommand","synthetic":false,"types":[]},{"text":"impl Clone for SubClientCommand","synthetic":false,"types":[]},{"text":"impl Clone for SubUmbrellaCommand","synthetic":false,"types":[]},{"text":"impl Clone for SubLibraryCommand","synthetic":false,"types":[]},{"text":"impl Clone for PreboundDylibCommand","synthetic":false,"types":[]},{"text":"impl Clone for DylinkerCommand","synthetic":false,"types":[]},{"text":"impl Clone for ThreadCommand","synthetic":false,"types":[]},{"text":"impl Clone for RoutinesCommand32","synthetic":false,"types":[]},{"text":"impl Clone for RoutinesCommand64","synthetic":false,"types":[]},{"text":"impl Clone for SymtabCommand","synthetic":false,"types":[]},{"text":"impl Clone for DysymtabCommand","synthetic":false,"types":[]},{"text":"impl Clone for DylibTableOfContents","synthetic":false,"types":[]},{"text":"impl Clone for DylibModule","synthetic":false,"types":[]},{"text":"impl Clone for DylibModule64","synthetic":false,"types":[]},{"text":"impl Clone for DylibReference","synthetic":false,"types":[]},{"text":"impl Clone for TwolevelHintsCommand","synthetic":false,"types":[]},{"text":"impl Clone for TwolevelHint","synthetic":false,"types":[]},{"text":"impl Clone for PrebindCksumCommand","synthetic":false,"types":[]},{"text":"impl Clone for UuidCommand","synthetic":false,"types":[]},{"text":"impl Clone for RpathCommand","synthetic":false,"types":[]},{"text":"impl Clone for LinkeditDataCommand","synthetic":false,"types":[]},{"text":"impl Clone for EncryptionInfoCommand32","synthetic":false,"types":[]},{"text":"impl Clone for EncryptionInfoCommand64","synthetic":false,"types":[]},{"text":"impl Clone for VersionMinCommand","synthetic":false,"types":[]},{"text":"impl Clone for DyldInfoCommand","synthetic":false,"types":[]},{"text":"impl Clone for LinkerOptionCommand","synthetic":false,"types":[]},{"text":"impl Clone for SymsegCommand","synthetic":false,"types":[]},{"text":"impl Clone for IdentCommand","synthetic":false,"types":[]},{"text":"impl Clone for FvmfileCommand","synthetic":false,"types":[]},{"text":"impl Clone for EntryPointCommand","synthetic":false,"types":[]},{"text":"impl Clone for SourceVersionCommand","synthetic":false,"types":[]},{"text":"impl Clone for DataInCodeEntry","synthetic":false,"types":[]},{"text":"impl Clone for RelocationInfo","synthetic":false,"types":[]},{"text":"impl Clone for Nlist32","synthetic":false,"types":[]},{"text":"impl Clone for Nlist64","synthetic":false,"types":[]},{"text":"impl Clone for Nlist","synthetic":false,"types":[]},{"text":"impl Clone for SymbolsCtx","synthetic":false,"types":[]},{"text":"impl Clone for DataDirectory","synthetic":false,"types":[]},{"text":"impl Clone for DataDirectories","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for DebugData&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ImageDebugDirectory","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for CodeviewPDB70DebugInfo&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RuntimeFunction","synthetic":false,"types":[]},{"text":"impl Clone for Register","synthetic":false,"types":[]},{"text":"impl Clone for StackFrameOffset","synthetic":false,"types":[]},{"text":"impl Clone for UnwindOperation","synthetic":false,"types":[]},{"text":"impl Clone for UnwindCode","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UnwindCodeIterator&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UnwindHandler&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UnwindInfo&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ExportDirectoryTable","synthetic":false,"types":[]},{"text":"impl Clone for DosHeader","synthetic":false,"types":[]},{"text":"impl Clone for CoffHeader","synthetic":false,"types":[]},{"text":"impl Clone for Header","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for HintNameTableEntry&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SyntheticImportLookupTableEntry&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for StandardFields32","synthetic":false,"types":[]},{"text":"impl Clone for StandardFields64","synthetic":false,"types":[]},{"text":"impl Clone for StandardFields","synthetic":false,"types":[]},{"text":"impl Clone for WindowsFields32","synthetic":false,"types":[]},{"text":"impl Clone for WindowsFields64","synthetic":false,"types":[]},{"text":"impl Clone for OptionalHeader","synthetic":false,"types":[]},{"text":"impl Clone for Relocation","synthetic":false,"types":[]},{"text":"impl Clone for SectionTable","synthetic":false,"types":[]},{"text":"impl Clone for Symbol","synthetic":false,"types":[]},{"text":"impl Clone for AuxFunctionDefinition","synthetic":false,"types":[]},{"text":"impl Clone for AuxBeginAndEndFunction","synthetic":false,"types":[]},{"text":"impl Clone for AuxWeakExternal","synthetic":false,"types":[]},{"text":"impl Clone for AuxSectionDefinition","synthetic":false,"types":[]},{"text":"impl Clone for MemberHeader","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Header&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Member&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T&gt; Clone for Bucket&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for RawTable&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for RawIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashSet&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, '_&gt; Clone for Iter&lt;'_, K&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for SymmetricDifference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TryReserveError","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for FormattedDuration","synthetic":false,"types":[]},{"text":"impl Clone for Duration","synthetic":false,"types":[]},{"text":"impl Clone for Timestamp","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Rfc3339Timestamp","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;K, V, S&gt; Clone for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; Clone for Iter&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S1, S2, '_&gt; Clone for SymmetricDifference&lt;'_, T, S1, S2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for Interleave&lt;I, J&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Iterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Batching&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Step&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I, J, F&gt; Clone for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Iterator&lt;Item = I::Item&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Peekable&lt;I&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Peekable&lt;J&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, Pred:&nbsp;Clone&gt; Clone for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for WhileSome&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: HasCombination&lt;I&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Combination: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for MapInto&lt;I, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapResults&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Positions&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Update&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for EitherOrBoth&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I, J&gt; Clone for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator&lt;Item = J&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FormatWith&lt;'a, I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, I:&nbsp;Clone&gt; Clone for Format&lt;'a, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, F&gt; Clone for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, J, F&gt; Clone for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;PutBack&lt;Fuse&lt;I&gt;&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;PutBack&lt;Fuse&lt;J&gt;&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for MinMaxResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for PadUsing&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + Iterator&gt; Clone for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for RcIter&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RepeatN&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for RepeatCall&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Unfold&lt;St, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Iterate&lt;St, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: HomogeneousTuple,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Buffer: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator&lt;Item = T::Item&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: HomogeneousTuple,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Buffer: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator&lt;Item = T::Item&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: HomogeneousTuple,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + Iterator, V:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for UniqueBy&lt;I, V, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + Iterator&gt; Clone for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Position&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for ZipEq&lt;I, J&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, U:&nbsp;Clone&gt; Clone for ZipLongest&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Zip&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for FoldWhile&lt;T&gt;","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Clone for DIR","synthetic":false,"types":[]},{"text":"impl Clone for group","synthetic":false,"types":[]},{"text":"impl Clone for utimbuf","synthetic":false,"types":[]},{"text":"impl Clone for timeval","synthetic":false,"types":[]},{"text":"impl Clone for timespec","synthetic":false,"types":[]},{"text":"impl Clone for rlimit","synthetic":false,"types":[]},{"text":"impl Clone for rusage","synthetic":false,"types":[]},{"text":"impl Clone for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Clone for hostent","synthetic":false,"types":[]},{"text":"impl Clone for iovec","synthetic":false,"types":[]},{"text":"impl Clone for pollfd","synthetic":false,"types":[]},{"text":"impl Clone for winsize","synthetic":false,"types":[]},{"text":"impl Clone for linger","synthetic":false,"types":[]},{"text":"impl Clone for sigval","synthetic":false,"types":[]},{"text":"impl Clone for itimerval","synthetic":false,"types":[]},{"text":"impl Clone for tms","synthetic":false,"types":[]},{"text":"impl Clone for servent","synthetic":false,"types":[]},{"text":"impl Clone for protoent","synthetic":false,"types":[]},{"text":"impl Clone for FILE","synthetic":false,"types":[]},{"text":"impl Clone for fpos_t","synthetic":false,"types":[]},{"text":"impl Clone for timezone","synthetic":false,"types":[]},{"text":"impl Clone for in_addr","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Clone for addrinfo","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Clone for fd_set","synthetic":false,"types":[]},{"text":"impl Clone for tm","synthetic":false,"types":[]},{"text":"impl Clone for sched_param","synthetic":false,"types":[]},{"text":"impl Clone for Dl_info","synthetic":false,"types":[]},{"text":"impl Clone for lconv","synthetic":false,"types":[]},{"text":"impl Clone for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for ifaddrs","synthetic":false,"types":[]},{"text":"impl Clone for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Clone for arpreq","synthetic":false,"types":[]},{"text":"impl Clone for arpreq_old","synthetic":false,"types":[]},{"text":"impl Clone for arphdr","synthetic":false,"types":[]},{"text":"impl Clone for mmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for epoll_event","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Clone for utsname","synthetic":false,"types":[]},{"text":"impl Clone for sigevent","synthetic":false,"types":[]},{"text":"impl Clone for fpos64_t","synthetic":false,"types":[]},{"text":"impl Clone for rlimit64","synthetic":false,"types":[]},{"text":"impl Clone for glob_t","synthetic":false,"types":[]},{"text":"impl Clone for passwd","synthetic":false,"types":[]},{"text":"impl Clone for spwd","synthetic":false,"types":[]},{"text":"impl Clone for dqblk","synthetic":false,"types":[]},{"text":"impl Clone for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Clone for itimerspec","synthetic":false,"types":[]},{"text":"impl Clone for fsid_t","synthetic":false,"types":[]},{"text":"impl Clone for packet_mreq","synthetic":false,"types":[]},{"text":"impl Clone for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Clone for if_nameindex","synthetic":false,"types":[]},{"text":"impl Clone for msginfo","synthetic":false,"types":[]},{"text":"impl Clone for sembuf","synthetic":false,"types":[]},{"text":"impl Clone for input_event","synthetic":false,"types":[]},{"text":"impl Clone for input_id","synthetic":false,"types":[]},{"text":"impl Clone for input_absinfo","synthetic":false,"types":[]},{"text":"impl Clone for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Clone for input_mask","synthetic":false,"types":[]},{"text":"impl Clone for ff_replay","synthetic":false,"types":[]},{"text":"impl Clone for ff_trigger","synthetic":false,"types":[]},{"text":"impl Clone for ff_envelope","synthetic":false,"types":[]},{"text":"impl Clone for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_effect","synthetic":false,"types":[]},{"text":"impl Clone for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for ucred","synthetic":false,"types":[]},{"text":"impl Clone for mntent","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Clone for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for arpd_request","synthetic":false,"types":[]},{"text":"impl Clone for inotify_event","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_response","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Clone for regmatch_t","synthetic":false,"types":[]},{"text":"impl Clone for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Clone for dirent","synthetic":false,"types":[]},{"text":"impl Clone for dirent64","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Clone for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Clone for mq_attr","synthetic":false,"types":[]},{"text":"impl Clone for statx","synthetic":false,"types":[]},{"text":"impl Clone for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Clone for aiocb","synthetic":false,"types":[]},{"text":"impl Clone for __exit_status","synthetic":false,"types":[]},{"text":"impl Clone for __timeval","synthetic":false,"types":[]},{"text":"impl Clone for glob64_t","synthetic":false,"types":[]},{"text":"impl Clone for msghdr","synthetic":false,"types":[]},{"text":"impl Clone for cmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for termios","synthetic":false,"types":[]},{"text":"impl Clone for mallinfo","synthetic":false,"types":[]},{"text":"impl Clone for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Clone for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Clone for nlattr","synthetic":false,"types":[]},{"text":"impl Clone for rtentry","synthetic":false,"types":[]},{"text":"impl Clone for timex","synthetic":false,"types":[]},{"text":"impl Clone for ntptimeval","synthetic":false,"types":[]},{"text":"impl Clone for regex_t","synthetic":false,"types":[]},{"text":"impl Clone for utmpx","synthetic":false,"types":[]},{"text":"impl Clone for sigset_t","synthetic":false,"types":[]},{"text":"impl Clone for sysinfo","synthetic":false,"types":[]},{"text":"impl Clone for msqid_ds","synthetic":false,"types":[]},{"text":"impl Clone for sigaction","synthetic":false,"types":[]},{"text":"impl Clone for statfs","synthetic":false,"types":[]},{"text":"impl Clone for flock","synthetic":false,"types":[]},{"text":"impl Clone for flock64","synthetic":false,"types":[]},{"text":"impl Clone for siginfo_t","synthetic":false,"types":[]},{"text":"impl Clone for stack_t","synthetic":false,"types":[]},{"text":"impl Clone for stat","synthetic":false,"types":[]},{"text":"impl Clone for stat64","synthetic":false,"types":[]},{"text":"impl Clone for statfs64","synthetic":false,"types":[]},{"text":"impl Clone for statvfs64","synthetic":false,"types":[]},{"text":"impl Clone for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Clone for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Clone for user","synthetic":false,"types":[]},{"text":"impl Clone for mcontext_t","synthetic":false,"types":[]},{"text":"impl Clone for ipc_perm","synthetic":false,"types":[]},{"text":"impl Clone for shmid_ds","synthetic":false,"types":[]},{"text":"impl Clone for termios2","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Clone for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Clone for ucontext_t","synthetic":false,"types":[]},{"text":"impl Clone for statvfs","synthetic":false,"types":[]},{"text":"impl Clone for max_align_t","synthetic":false,"types":[]},{"text":"impl Clone for sem_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Clone for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Clone for in6_addr","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Clone for LogLevel","synthetic":false,"types":[]},{"text":"impl Clone for LogLevelFilter","synthetic":false,"types":[]},{"text":"impl Clone for LogLocation","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Clone for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl Clone for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl Clone for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl Clone for CompressionLevel","synthetic":false,"types":[]},{"text":"impl Clone for TINFLStatus","synthetic":false,"types":[]},{"text":"impl Clone for MZFlush","synthetic":false,"types":[]},{"text":"impl Clone for MZStatus","synthetic":false,"types":[]},{"text":"impl Clone for MZError","synthetic":false,"types":[]},{"text":"impl Clone for DataFormat","synthetic":false,"types":[]},{"text":"impl Clone for StreamResult","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;A&gt; Clone for OwnedRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for ShapeError","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone&gt; Clone for IndicesIter&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone&gt; Clone for Indices&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D:&nbsp;Clone&gt; Clone for ExactChunks&lt;'a, A, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D:&nbsp;Clone&gt; Clone for ExactChunksIter&lt;'a, A, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D:&nbsp;Clone&gt; Clone for Lanes&lt;'a, A, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D:&nbsp;Clone&gt; Clone for Windows&lt;'a, A, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D:&nbsp;Clone&gt; Clone for Iter&lt;'a, A, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Clone, D:&nbsp;Clone&gt; Clone for IndexedIter&lt;'a, A, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D:&nbsp;Clone&gt; Clone for LanesIter&lt;'a, A, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D:&nbsp;Clone&gt; Clone for AxisIter&lt;'a, A, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D:&nbsp;Clone&gt; Clone for AxisChunksIter&lt;'a, A, D&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Slice","synthetic":false,"types":[]},{"text":"impl Clone for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl&lt;T, D&gt; Clone for SliceInfo&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Parts:&nbsp;Clone, D:&nbsp;Clone&gt; Clone for Zip&lt;Parts, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for FoldWhile&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AxisDescription","synthetic":false,"types":[]},{"text":"impl&lt;'a, D&gt; Clone for Axes&lt;'a, D&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Axis","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ?Sized&gt; Clone for Dim&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl Clone for IxDynImpl","synthetic":false,"types":[]},{"text":"impl&lt;A&gt; Clone for OwnedArcRepr&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RawViewRepr&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for ViewRepr&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;RawDataClone, D:&nbsp;Clone&gt; Clone for ArrayBase&lt;S, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone&gt; Clone for Shape&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone&gt; Clone for StrideShape&lt;D&gt;","synthetic":false,"types":[]}];
implementors["ndarray_rand"] = [{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for F32&lt;S&gt;","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Clone for Sign","synthetic":false,"types":[]},{"text":"impl Clone for BigInt","synthetic":false,"types":[]},{"text":"impl Clone for BigUint","synthetic":false,"types":[]},{"text":"impl Clone for ParseBigIntError","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OrderedFloat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for NotNan&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FloatIsNan","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone&gt; Clone for ParseNotNanError&lt;E&gt;","synthetic":false,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Clone for WaitTimeoutResult","synthetic":false,"types":[]},{"text":"impl Clone for OnceState","synthetic":false,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Clone for ParkResult","synthetic":false,"types":[]},{"text":"impl Clone for UnparkResult","synthetic":false,"types":[]},{"text":"impl Clone for RequeueOp","synthetic":false,"types":[]},{"text":"impl Clone for FilterOp","synthetic":false,"types":[]},{"text":"impl Clone for UnparkToken","synthetic":false,"types":[]},{"text":"impl Clone for ParkToken","synthetic":false,"types":[]}];
implementors["pest"] = [{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for Error&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for ErrorVariant&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for InputLocation","synthetic":false,"types":[]},{"text":"impl Clone for LineColLocation","synthetic":false,"types":[]},{"text":"impl&lt;'i, R:&nbsp;Clone&gt; Clone for FlatPairs&lt;'i, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'i, R:&nbsp;Clone&gt; Clone for Pair&lt;'i, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'i, R:&nbsp;Clone&gt; Clone for Pairs&lt;'i, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'i, R:&nbsp;Clone&gt; Clone for Tokens&lt;'i, R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Lookahead","synthetic":false,"types":[]},{"text":"impl Clone for Atomicity","synthetic":false,"types":[]},{"text":"impl Clone for MatchDir","synthetic":false,"types":[]},{"text":"impl&lt;'i&gt; Clone for Position&lt;'i&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Assoc","synthetic":false,"types":[]},{"text":"impl&lt;'i&gt; Clone for Span&lt;'i&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'i, R:&nbsp;Clone&gt; Clone for Token&lt;'i, R&gt;","synthetic":false,"types":[]}];
implementors["pest_meta"] = [{"text":"impl Clone for Rule","synthetic":false,"types":[]},{"text":"impl Clone for RuleType","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for OptimizedRule","synthetic":false,"types":[]},{"text":"impl Clone for OptimizedExpr","synthetic":false,"types":[]},{"text":"impl Clone for Rule","synthetic":false,"types":[]},{"text":"impl&lt;'i&gt; Clone for ParserRule&lt;'i&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'i&gt; Clone for ParserNode&lt;'i&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'i&gt; Clone for ParserExpr&lt;'i&gt;","synthetic":false,"types":[]}];
implementors["plain"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Clone for YesS3","synthetic":false,"types":[]},{"text":"impl Clone for NoS3","synthetic":false,"types":[]},{"text":"impl Clone for YesS4","synthetic":false,"types":[]},{"text":"impl Clone for NoS4","synthetic":false,"types":[]},{"text":"impl Clone for YesA1","synthetic":false,"types":[]},{"text":"impl Clone for NoA1","synthetic":false,"types":[]},{"text":"impl Clone for YesA2","synthetic":false,"types":[]},{"text":"impl Clone for NoA2","synthetic":false,"types":[]},{"text":"impl Clone for YesNI","synthetic":false,"types":[]},{"text":"impl Clone for NoNI","synthetic":false,"types":[]},{"text":"impl&lt;S3:&nbsp;Clone, S4:&nbsp;Clone, NI:&nbsp;Clone&gt; Clone for SseMachine&lt;S3, S4, NI&gt;","synthetic":false,"types":[]},{"text":"impl&lt;NI:&nbsp;Clone&gt; Clone for Avx2Machine&lt;NI&gt;","synthetic":false,"types":[]},{"text":"impl Clone for vec128_storage","synthetic":false,"types":[]},{"text":"impl Clone for vec256_storage","synthetic":false,"types":[]},{"text":"impl Clone for vec512_storage","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Clone for TokenStream","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for TokenTree","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for Delimiter","synthetic":false,"types":[]},{"text":"impl Clone for Punct","synthetic":false,"types":[]},{"text":"impl Clone for Spacing","synthetic":false,"types":[]},{"text":"impl Clone for Ident","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for IntoIter","synthetic":false,"types":[]}];
implementors["py_literal"] = [{"text":"impl Clone for Value","synthetic":false,"types":[]}];
implementors["pyo3"] = [{"text":"impl Clone for ElementType","synthetic":false,"types":[]},{"text":"impl&lt;'p&gt; Clone for PyVisit&lt;'p&gt;","synthetic":false,"types":[]},{"text":"impl Clone for PyMethodType","synthetic":false,"types":[]},{"text":"impl Clone for PyMethodDef","synthetic":false,"types":[]},{"text":"impl Clone for PyClassAttributeDef","synthetic":false,"types":[]},{"text":"impl Clone for PyGetterDef","synthetic":false,"types":[]},{"text":"impl Clone for PySetterDef","synthetic":false,"types":[]},{"text":"impl Clone for PyMemAllocatorDomain","synthetic":false,"types":[]},{"text":"impl Clone for PyMemAllocatorEx","synthetic":false,"types":[]},{"text":"impl Clone for PyObject","synthetic":false,"types":[]},{"text":"impl Clone for PyVarObject","synthetic":false,"types":[]},{"text":"impl Clone for Py_buffer","synthetic":false,"types":[]},{"text":"impl Clone for PyNumberMethods","synthetic":false,"types":[]},{"text":"impl Clone for PySequenceMethods","synthetic":false,"types":[]},{"text":"impl Clone for PyMappingMethods","synthetic":false,"types":[]},{"text":"impl Clone for PyAsyncMethods","synthetic":false,"types":[]},{"text":"impl Clone for PyBufferProcs","synthetic":false,"types":[]},{"text":"impl Clone for PyTypeObject","synthetic":false,"types":[]},{"text":"impl Clone for PyHeapTypeObject","synthetic":false,"types":[]},{"text":"impl Clone for PyType_Slot","synthetic":false,"types":[]},{"text":"impl Clone for PyType_Spec","synthetic":false,"types":[]},{"text":"impl Clone for PyObjectArenaAllocator","synthetic":false,"types":[]},{"text":"impl Clone for PyHash_FuncDef","synthetic":false,"types":[]},{"text":"impl Clone for Py_complex","synthetic":false,"types":[]},{"text":"impl Clone for PyComplexObject","synthetic":false,"types":[]},{"text":"impl Clone for PyListObject","synthetic":false,"types":[]},{"text":"impl Clone for PyMethodDef","synthetic":false,"types":[]},{"text":"impl Clone for PyModuleDef_Base","synthetic":false,"types":[]},{"text":"impl Clone for PyModuleDef_Slot","synthetic":false,"types":[]},{"text":"impl Clone for PyModuleDef","synthetic":false,"types":[]},{"text":"impl Clone for PyGetSetDef","synthetic":false,"types":[]},{"text":"impl Clone for PyGenObject","synthetic":false,"types":[]},{"text":"impl Clone for PyStructSequence_Field","synthetic":false,"types":[]},{"text":"impl Clone for PyStructSequence_Desc","synthetic":false,"types":[]},{"text":"impl Clone for PyInterpreterState","synthetic":false,"types":[]},{"text":"impl Clone for PyThreadState","synthetic":false,"types":[]},{"text":"impl Clone for PyGILState_STATE","synthetic":false,"types":[]},{"text":"impl Clone for PyCompilerFlags","synthetic":false,"types":[]},{"text":"impl Clone for PyCodeObject","synthetic":false,"types":[]},{"text":"impl Clone for PyFutureFeatures","synthetic":false,"types":[]},{"text":"impl Clone for PyMemberDef","synthetic":false,"types":[]},{"text":"impl Clone for PyTryBlock","synthetic":false,"types":[]},{"text":"impl Clone for PyFrameObject","synthetic":false,"types":[]},{"text":"impl Clone for PyDateTime_CAPI","synthetic":false,"types":[]},{"text":"impl Clone for PyDateTime_Date","synthetic":false,"types":[]},{"text":"impl Clone for PyDateTime_Time","synthetic":false,"types":[]},{"text":"impl Clone for PyDateTime_DateTime","synthetic":false,"types":[]},{"text":"impl Clone for PyDateTime_Delta","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Py&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for PyObject","synthetic":false,"types":[]},{"text":"impl&lt;'p&gt; Clone for Python&lt;'p&gt;","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Clone for Bernoulli","synthetic":false,"types":[]},{"text":"impl Clone for BernoulliError","synthetic":false,"types":[]},{"text":"impl Clone for Binomial","synthetic":false,"types":[]},{"text":"impl Clone for Cauchy","synthetic":false,"types":[]},{"text":"impl Clone for Dirichlet","synthetic":false,"types":[]},{"text":"impl Clone for Exp1","synthetic":false,"types":[]},{"text":"impl Clone for Exp","synthetic":false,"types":[]},{"text":"impl Clone for Gamma","synthetic":false,"types":[]},{"text":"impl Clone for ChiSquared","synthetic":false,"types":[]},{"text":"impl Clone for FisherF","synthetic":false,"types":[]},{"text":"impl Clone for StudentT","synthetic":false,"types":[]},{"text":"impl Clone for Beta","synthetic":false,"types":[]},{"text":"impl Clone for StandardNormal","synthetic":false,"types":[]},{"text":"impl Clone for Normal","synthetic":false,"types":[]},{"text":"impl Clone for LogNormal","synthetic":false,"types":[]},{"text":"impl Clone for Pareto","synthetic":false,"types":[]},{"text":"impl Clone for Poisson","synthetic":false,"types":[]},{"text":"impl Clone for Triangular","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone + SampleUniform&gt; Clone for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone&gt; Clone for UniformInt&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone&gt; Clone for UniformFloat&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UniformDuration","synthetic":false,"types":[]},{"text":"impl Clone for UnitCircle","synthetic":false,"types":[]},{"text":"impl Clone for UnitSphereSurface","synthetic":false,"types":[]},{"text":"impl Clone for Weibull","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Weight&gt; Clone for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Uniform&lt;W&gt;: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone + SampleUniform + PartialOrd&gt; Clone for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for WeightedError","synthetic":false,"types":[]},{"text":"impl Clone for OpenClosed01","synthetic":false,"types":[]},{"text":"impl Clone for Open01","synthetic":false,"types":[]},{"text":"impl Clone for Standard","synthetic":false,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Clone for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: BlockRngCore + SeedableRng + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RngCore + Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for StepRng","synthetic":false,"types":[]},{"text":"impl Clone for SmallRng","synthetic":false,"types":[]},{"text":"impl Clone for StdRng","synthetic":false,"types":[]},{"text":"impl Clone for ThreadRng","synthetic":false,"types":[]},{"text":"impl Clone for IndexVec","synthetic":false,"types":[]},{"text":"impl Clone for IndexVecIntoIter","synthetic":false,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Clone for ChaCha20Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha20Rng","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha12Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha12Rng","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha8Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha8Rng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl&lt;R:&nbsp;Clone + BlockRngCore + ?Sized&gt; Clone for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Results: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + BlockRngCore + ?Sized&gt; Clone for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Results: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for OsRng","synthetic":false,"types":[]}];
implementors["rand_distr"] = [{"text":"impl Clone for UnitSphere","synthetic":false,"types":[]},{"text":"impl Clone for UnitBall","synthetic":false,"types":[]},{"text":"impl Clone for UnitCircle","synthetic":false,"types":[]},{"text":"impl Clone for UnitDisc","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Gamma&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for ChiSquared&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ChiSquaredError","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for FisherF&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FisherFError","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for StudentT&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Beta&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BetaError","synthetic":false,"types":[]},{"text":"impl Clone for StandardNormal","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Normal&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for LogNormal&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Exp1","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Exp&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Pareto&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Pert&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for PertError","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Poisson&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Binomial","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Cauchy&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Dirichlet&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Triangular&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TriangularError","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Weibull&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl Clone for Lcg64Xsh32","synthetic":false,"types":[]},{"text":"impl Clone for Lcg128Xsl64","synthetic":false,"types":[]},{"text":"impl Clone for Mcg128Xsl64","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl Clone for WithComments","synthetic":false,"types":[]},{"text":"impl Clone for Comment","synthetic":false,"types":[]},{"text":"impl Clone for Ast","synthetic":false,"types":[]},{"text":"impl Clone for Alternation","synthetic":false,"types":[]},{"text":"impl Clone for Concat","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for LiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for SpecialLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for HexLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerl","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerlKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassAscii","synthetic":false,"types":[]},{"text":"impl Clone for ClassAsciiKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeOpKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassBracketed","synthetic":false,"types":[]},{"text":"impl Clone for ClassSet","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetItem","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetUnion","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOp","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Clone for Assertion","synthetic":false,"types":[]},{"text":"impl Clone for AssertionKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionOp","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for CaptureName","synthetic":false,"types":[]},{"text":"impl Clone for SetFlags","synthetic":false,"types":[]},{"text":"impl Clone for Flags","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItem","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItemKind","synthetic":false,"types":[]},{"text":"impl Clone for Flag","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Literals","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for TranslatorBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Translator","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Hir","synthetic":false,"types":[]},{"text":"impl Clone for HirKind","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytes","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Clone for Anchor","synthetic":false,"types":[]},{"text":"impl Clone for WordBoundary","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Range","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["scroll"] = [{"text":"impl Clone for StrCtx","synthetic":false,"types":[]},{"text":"impl Clone for Endian","synthetic":false,"types":[]},{"text":"impl Clone for Uleb128","synthetic":false,"types":[]},{"text":"impl Clone for Sleb128","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for StringDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E&gt; Clone for CowStrDeserializer&lt;'a, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for SeqDeserializer&lt;I, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for SeqAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, I, E&gt; Clone for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Pair,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I::Item as Pair&gt;::Second: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for MapAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Clone for Category","synthetic":false,"types":[]},{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CompactFormatter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PrettyFormatter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Number","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Clone for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array + Clone&gt; Clone for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["symbolic_expressions"] = [{"text":"impl Clone for Sexp","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Clone for Underscore","synthetic":false,"types":[]},{"text":"impl Clone for Abstract","synthetic":false,"types":[]},{"text":"impl Clone for As","synthetic":false,"types":[]},{"text":"impl Clone for Async","synthetic":false,"types":[]},{"text":"impl Clone for Auto","synthetic":false,"types":[]},{"text":"impl Clone for Await","synthetic":false,"types":[]},{"text":"impl Clone for Become","synthetic":false,"types":[]},{"text":"impl Clone for Box","synthetic":false,"types":[]},{"text":"impl Clone for Break","synthetic":false,"types":[]},{"text":"impl Clone for Const","synthetic":false,"types":[]},{"text":"impl Clone for Continue","synthetic":false,"types":[]},{"text":"impl Clone for Crate","synthetic":false,"types":[]},{"text":"impl Clone for Default","synthetic":false,"types":[]},{"text":"impl Clone for Do","synthetic":false,"types":[]},{"text":"impl Clone for Dyn","synthetic":false,"types":[]},{"text":"impl Clone for Else","synthetic":false,"types":[]},{"text":"impl Clone for Enum","synthetic":false,"types":[]},{"text":"impl Clone for Extern","synthetic":false,"types":[]},{"text":"impl Clone for Final","synthetic":false,"types":[]},{"text":"impl Clone for Fn","synthetic":false,"types":[]},{"text":"impl Clone for For","synthetic":false,"types":[]},{"text":"impl Clone for If","synthetic":false,"types":[]},{"text":"impl Clone for Impl","synthetic":false,"types":[]},{"text":"impl Clone for In","synthetic":false,"types":[]},{"text":"impl Clone for Let","synthetic":false,"types":[]},{"text":"impl Clone for Loop","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]},{"text":"impl Clone for Mod","synthetic":false,"types":[]},{"text":"impl Clone for Move","synthetic":false,"types":[]},{"text":"impl Clone for Mut","synthetic":false,"types":[]},{"text":"impl Clone for Override","synthetic":false,"types":[]},{"text":"impl Clone for Priv","synthetic":false,"types":[]},{"text":"impl Clone for Pub","synthetic":false,"types":[]},{"text":"impl Clone for Ref","synthetic":false,"types":[]},{"text":"impl Clone for Return","synthetic":false,"types":[]},{"text":"impl Clone for SelfType","synthetic":false,"types":[]},{"text":"impl Clone for SelfValue","synthetic":false,"types":[]},{"text":"impl Clone for Static","synthetic":false,"types":[]},{"text":"impl Clone for Struct","synthetic":false,"types":[]},{"text":"impl Clone for Super","synthetic":false,"types":[]},{"text":"impl Clone for Trait","synthetic":false,"types":[]},{"text":"impl Clone for Try","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Typeof","synthetic":false,"types":[]},{"text":"impl Clone for Union","synthetic":false,"types":[]},{"text":"impl Clone for Unsafe","synthetic":false,"types":[]},{"text":"impl Clone for Unsized","synthetic":false,"types":[]},{"text":"impl Clone for Use","synthetic":false,"types":[]},{"text":"impl Clone for Virtual","synthetic":false,"types":[]},{"text":"impl Clone for Where","synthetic":false,"types":[]},{"text":"impl Clone for While","synthetic":false,"types":[]},{"text":"impl Clone for Yield","synthetic":false,"types":[]},{"text":"impl Clone for Add","synthetic":false,"types":[]},{"text":"impl Clone for AddEq","synthetic":false,"types":[]},{"text":"impl Clone for And","synthetic":false,"types":[]},{"text":"impl Clone for AndAnd","synthetic":false,"types":[]},{"text":"impl Clone for AndEq","synthetic":false,"types":[]},{"text":"impl Clone for At","synthetic":false,"types":[]},{"text":"impl Clone for Bang","synthetic":false,"types":[]},{"text":"impl Clone for Caret","synthetic":false,"types":[]},{"text":"impl Clone for CaretEq","synthetic":false,"types":[]},{"text":"impl Clone for Colon","synthetic":false,"types":[]},{"text":"impl Clone for Colon2","synthetic":false,"types":[]},{"text":"impl Clone for Comma","synthetic":false,"types":[]},{"text":"impl Clone for Div","synthetic":false,"types":[]},{"text":"impl Clone for DivEq","synthetic":false,"types":[]},{"text":"impl Clone for Dollar","synthetic":false,"types":[]},{"text":"impl Clone for Dot","synthetic":false,"types":[]},{"text":"impl Clone for Dot2","synthetic":false,"types":[]},{"text":"impl Clone for Dot3","synthetic":false,"types":[]},{"text":"impl Clone for DotDotEq","synthetic":false,"types":[]},{"text":"impl Clone for Eq","synthetic":false,"types":[]},{"text":"impl Clone for EqEq","synthetic":false,"types":[]},{"text":"impl Clone for Ge","synthetic":false,"types":[]},{"text":"impl Clone for Gt","synthetic":false,"types":[]},{"text":"impl Clone for Le","synthetic":false,"types":[]},{"text":"impl Clone for Lt","synthetic":false,"types":[]},{"text":"impl Clone for MulEq","synthetic":false,"types":[]},{"text":"impl Clone for Ne","synthetic":false,"types":[]},{"text":"impl Clone for Or","synthetic":false,"types":[]},{"text":"impl Clone for OrEq","synthetic":false,"types":[]},{"text":"impl Clone for OrOr","synthetic":false,"types":[]},{"text":"impl Clone for Pound","synthetic":false,"types":[]},{"text":"impl Clone for Question","synthetic":false,"types":[]},{"text":"impl Clone for RArrow","synthetic":false,"types":[]},{"text":"impl Clone for LArrow","synthetic":false,"types":[]},{"text":"impl Clone for Rem","synthetic":false,"types":[]},{"text":"impl Clone for RemEq","synthetic":false,"types":[]},{"text":"impl Clone for FatArrow","synthetic":false,"types":[]},{"text":"impl Clone for Semi","synthetic":false,"types":[]},{"text":"impl Clone for Shl","synthetic":false,"types":[]},{"text":"impl Clone for ShlEq","synthetic":false,"types":[]},{"text":"impl Clone for Shr","synthetic":false,"types":[]},{"text":"impl Clone for ShrEq","synthetic":false,"types":[]},{"text":"impl Clone for Star","synthetic":false,"types":[]},{"text":"impl Clone for Sub","synthetic":false,"types":[]},{"text":"impl Clone for SubEq","synthetic":false,"types":[]},{"text":"impl Clone for Tilde","synthetic":false,"types":[]},{"text":"impl Clone for Brace","synthetic":false,"types":[]},{"text":"impl Clone for Bracket","synthetic":false,"types":[]},{"text":"impl Clone for Paren","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ImplGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TypeGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Turbofish&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Lifetime","synthetic":false,"types":[]},{"text":"impl Clone for LitStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByteStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByte","synthetic":false,"types":[]},{"text":"impl Clone for LitChar","synthetic":false,"types":[]},{"text":"impl Clone for LitInt","synthetic":false,"types":[]},{"text":"impl Clone for LitFloat","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, P&gt; Clone for Pairs&lt;'a, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Abi","synthetic":false,"types":[]},{"text":"impl Clone for AngleBracketedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Arm","synthetic":false,"types":[]},{"text":"impl Clone for AttrStyle","synthetic":false,"types":[]},{"text":"impl Clone for Attribute","synthetic":false,"types":[]},{"text":"impl Clone for BareFnArg","synthetic":false,"types":[]},{"text":"impl Clone for BinOp","synthetic":false,"types":[]},{"text":"impl Clone for Binding","synthetic":false,"types":[]},{"text":"impl Clone for Block","synthetic":false,"types":[]},{"text":"impl Clone for BoundLifetimes","synthetic":false,"types":[]},{"text":"impl Clone for ConstParam","synthetic":false,"types":[]},{"text":"impl Clone for Constraint","synthetic":false,"types":[]},{"text":"impl Clone for Data","synthetic":false,"types":[]},{"text":"impl Clone for DataEnum","synthetic":false,"types":[]},{"text":"impl Clone for DataStruct","synthetic":false,"types":[]},{"text":"impl Clone for DataUnion","synthetic":false,"types":[]},{"text":"impl Clone for DeriveInput","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for ExprArray","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssign","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssignOp","synthetic":false,"types":[]},{"text":"impl Clone for ExprAsync","synthetic":false,"types":[]},{"text":"impl Clone for ExprAwait","synthetic":false,"types":[]},{"text":"impl Clone for ExprBinary","synthetic":false,"types":[]},{"text":"impl Clone for ExprBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprBox","synthetic":false,"types":[]},{"text":"impl Clone for ExprBreak","synthetic":false,"types":[]},{"text":"impl Clone for ExprCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprCast","synthetic":false,"types":[]},{"text":"impl Clone for ExprClosure","synthetic":false,"types":[]},{"text":"impl Clone for ExprContinue","synthetic":false,"types":[]},{"text":"impl Clone for ExprField","synthetic":false,"types":[]},{"text":"impl Clone for ExprForLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprGroup","synthetic":false,"types":[]},{"text":"impl Clone for ExprIf","synthetic":false,"types":[]},{"text":"impl Clone for ExprIndex","synthetic":false,"types":[]},{"text":"impl Clone for ExprLet","synthetic":false,"types":[]},{"text":"impl Clone for ExprLit","synthetic":false,"types":[]},{"text":"impl Clone for ExprLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprMacro","synthetic":false,"types":[]},{"text":"impl Clone for ExprMatch","synthetic":false,"types":[]},{"text":"impl Clone for ExprMethodCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprParen","synthetic":false,"types":[]},{"text":"impl Clone for ExprPath","synthetic":false,"types":[]},{"text":"impl Clone for ExprRange","synthetic":false,"types":[]},{"text":"impl Clone for ExprReference","synthetic":false,"types":[]},{"text":"impl Clone for ExprRepeat","synthetic":false,"types":[]},{"text":"impl Clone for ExprReturn","synthetic":false,"types":[]},{"text":"impl Clone for ExprStruct","synthetic":false,"types":[]},{"text":"impl Clone for ExprTry","synthetic":false,"types":[]},{"text":"impl Clone for ExprTryBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprTuple","synthetic":false,"types":[]},{"text":"impl Clone for ExprType","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnary","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnsafe","synthetic":false,"types":[]},{"text":"impl Clone for ExprWhile","synthetic":false,"types":[]},{"text":"impl Clone for ExprYield","synthetic":false,"types":[]},{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for FieldPat","synthetic":false,"types":[]},{"text":"impl Clone for FieldValue","synthetic":false,"types":[]},{"text":"impl Clone for Fields","synthetic":false,"types":[]},{"text":"impl Clone for FieldsNamed","synthetic":false,"types":[]},{"text":"impl Clone for FieldsUnnamed","synthetic":false,"types":[]},{"text":"impl Clone for File","synthetic":false,"types":[]},{"text":"impl Clone for FnArg","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItem","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemType","synthetic":false,"types":[]},{"text":"impl Clone for GenericArgument","synthetic":false,"types":[]},{"text":"impl Clone for GenericMethodArgument","synthetic":false,"types":[]},{"text":"impl Clone for GenericParam","synthetic":false,"types":[]},{"text":"impl Clone for Generics","synthetic":false,"types":[]},{"text":"impl Clone for ImplItem","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemType","synthetic":false,"types":[]},{"text":"impl Clone for Index","synthetic":false,"types":[]},{"text":"impl Clone for Item","synthetic":false,"types":[]},{"text":"impl Clone for ItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ItemEnum","synthetic":false,"types":[]},{"text":"impl Clone for ItemExternCrate","synthetic":false,"types":[]},{"text":"impl Clone for ItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ItemForeignMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemImpl","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro2","synthetic":false,"types":[]},{"text":"impl Clone for ItemMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ItemStruct","synthetic":false,"types":[]},{"text":"impl Clone for ItemTrait","synthetic":false,"types":[]},{"text":"impl Clone for ItemTraitAlias","synthetic":false,"types":[]},{"text":"impl Clone for ItemType","synthetic":false,"types":[]},{"text":"impl Clone for ItemUnion","synthetic":false,"types":[]},{"text":"impl Clone for ItemUse","synthetic":false,"types":[]},{"text":"impl Clone for Label","synthetic":false,"types":[]},{"text":"impl Clone for LifetimeDef","synthetic":false,"types":[]},{"text":"impl Clone for Lit","synthetic":false,"types":[]},{"text":"impl Clone for LitBool","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for MacroDelimiter","synthetic":false,"types":[]},{"text":"impl Clone for Member","synthetic":false,"types":[]},{"text":"impl Clone for Meta","synthetic":false,"types":[]},{"text":"impl Clone for MetaList","synthetic":false,"types":[]},{"text":"impl Clone for MetaNameValue","synthetic":false,"types":[]},{"text":"impl Clone for MethodTurbofish","synthetic":false,"types":[]},{"text":"impl Clone for NestedMeta","synthetic":false,"types":[]},{"text":"impl Clone for ParenthesizedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Pat","synthetic":false,"types":[]},{"text":"impl Clone for PatBox","synthetic":false,"types":[]},{"text":"impl Clone for PatIdent","synthetic":false,"types":[]},{"text":"impl Clone for PatLit","synthetic":false,"types":[]},{"text":"impl Clone for PatMacro","synthetic":false,"types":[]},{"text":"impl Clone for PatOr","synthetic":false,"types":[]},{"text":"impl Clone for PatPath","synthetic":false,"types":[]},{"text":"impl Clone for PatRange","synthetic":false,"types":[]},{"text":"impl Clone for PatReference","synthetic":false,"types":[]},{"text":"impl Clone for PatRest","synthetic":false,"types":[]},{"text":"impl Clone for PatSlice","synthetic":false,"types":[]},{"text":"impl Clone for PatStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatTuple","synthetic":false,"types":[]},{"text":"impl Clone for PatTupleStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatType","synthetic":false,"types":[]},{"text":"impl Clone for PatWild","synthetic":false,"types":[]},{"text":"impl Clone for Path","synthetic":false,"types":[]},{"text":"impl Clone for PathArguments","synthetic":false,"types":[]},{"text":"impl Clone for PathSegment","synthetic":false,"types":[]},{"text":"impl Clone for PredicateEq","synthetic":false,"types":[]},{"text":"impl Clone for PredicateLifetime","synthetic":false,"types":[]},{"text":"impl Clone for PredicateType","synthetic":false,"types":[]},{"text":"impl Clone for QSelf","synthetic":false,"types":[]},{"text":"impl Clone for RangeLimits","synthetic":false,"types":[]},{"text":"impl Clone for Receiver","synthetic":false,"types":[]},{"text":"impl Clone for ReturnType","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for Stmt","synthetic":false,"types":[]},{"text":"impl Clone for TraitBound","synthetic":false,"types":[]},{"text":"impl Clone for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Clone for TraitItem","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemConst","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemType","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for TypeArray","synthetic":false,"types":[]},{"text":"impl Clone for TypeBareFn","synthetic":false,"types":[]},{"text":"impl Clone for TypeGroup","synthetic":false,"types":[]},{"text":"impl Clone for TypeImplTrait","synthetic":false,"types":[]},{"text":"impl Clone for TypeInfer","synthetic":false,"types":[]},{"text":"impl Clone for TypeMacro","synthetic":false,"types":[]},{"text":"impl Clone for TypeNever","synthetic":false,"types":[]},{"text":"impl Clone for TypeParam","synthetic":false,"types":[]},{"text":"impl Clone for TypeParamBound","synthetic":false,"types":[]},{"text":"impl Clone for TypeParen","synthetic":false,"types":[]},{"text":"impl Clone for TypePath","synthetic":false,"types":[]},{"text":"impl Clone for TypePtr","synthetic":false,"types":[]},{"text":"impl Clone for TypeReference","synthetic":false,"types":[]},{"text":"impl Clone for TypeSlice","synthetic":false,"types":[]},{"text":"impl Clone for TypeTraitObject","synthetic":false,"types":[]},{"text":"impl Clone for TypeTuple","synthetic":false,"types":[]},{"text":"impl Clone for UnOp","synthetic":false,"types":[]},{"text":"impl Clone for UseGlob","synthetic":false,"types":[]},{"text":"impl Clone for UseGroup","synthetic":false,"types":[]},{"text":"impl Clone for UseName","synthetic":false,"types":[]},{"text":"impl Clone for UsePath","synthetic":false,"types":[]},{"text":"impl Clone for UseRename","synthetic":false,"types":[]},{"text":"impl Clone for UseTree","synthetic":false,"types":[]},{"text":"impl Clone for Variadic","synthetic":false,"types":[]},{"text":"impl Clone for Variant","synthetic":false,"types":[]},{"text":"impl Clone for VisCrate","synthetic":false,"types":[]},{"text":"impl Clone for VisPublic","synthetic":false,"types":[]},{"text":"impl Clone for VisRestricted","synthetic":false,"types":[]},{"text":"impl Clone for Visibility","synthetic":false,"types":[]},{"text":"impl Clone for WhereClause","synthetic":false,"types":[]},{"text":"impl Clone for WherePredicate","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Clone for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["termcolor"] = [{"text":"impl Clone for ColorChoice","synthetic":false,"types":[]},{"text":"impl Clone for ColorSpec","synthetic":false,"types":[]},{"text":"impl Clone for Color","synthetic":false,"types":[]},{"text":"impl Clone for ParseColorError","synthetic":false,"types":[]}];
implementors["textwrap"] = [{"text":"impl Clone for NoHyphenation","synthetic":false,"types":[]},{"text":"impl Clone for HyphenSplitter","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Clone + WordSplitter&gt; Clone for Wrapper&lt;'a, S&gt;","synthetic":false,"types":[]}];
implementors["tvm"] = [{"text":"impl Clone for ConstIntBound","synthetic":false,"types":[]},{"text":"impl Clone for Attrs","synthetic":false,"types":[]},{"text":"impl Clone for BaseExpr","synthetic":false,"types":[]},{"text":"impl Clone for PrimExpr","synthetic":false,"types":[]},{"text":"impl Clone for GlobalVar","synthetic":false,"types":[]},{"text":"impl Clone for BaseFunc","synthetic":false,"types":[]},{"text":"impl Clone for IRModule","synthetic":false,"types":[]},{"text":"impl Clone for Op","synthetic":false,"types":[]},{"text":"impl Clone for Conv2DAttrs","synthetic":false,"types":[]},{"text":"impl Clone for BiasAddAttrs","synthetic":false,"types":[]},{"text":"impl Clone for DenseAttrs","synthetic":false,"types":[]},{"text":"impl Clone for GlobalPool2DAttrs","synthetic":false,"types":[]},{"text":"impl Clone for MaxPool2DAttrs","synthetic":false,"types":[]},{"text":"impl Clone for SoftmaxAttrs","synthetic":false,"types":[]},{"text":"impl Clone for ExpandDimsAttrs","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for Id","synthetic":false,"types":[]},{"text":"impl Clone for Constant","synthetic":false,"types":[]},{"text":"impl Clone for Tuple","synthetic":false,"types":[]},{"text":"impl Clone for Var","synthetic":false,"types":[]},{"text":"impl Clone for Call","synthetic":false,"types":[]},{"text":"impl Clone for Let","synthetic":false,"types":[]},{"text":"impl Clone for If","synthetic":false,"types":[]},{"text":"impl Clone for TupleGetItem","synthetic":false,"types":[]},{"text":"impl Clone for RefCreate","synthetic":false,"types":[]},{"text":"impl Clone for RefRead","synthetic":false,"types":[]},{"text":"impl Clone for RefWrite","synthetic":false,"types":[]},{"text":"impl Clone for Constructor","synthetic":false,"types":[]},{"text":"impl Clone for Pattern","synthetic":false,"types":[]},{"text":"impl Clone for PatternWildcard","synthetic":false,"types":[]},{"text":"impl Clone for PatternVar","synthetic":false,"types":[]},{"text":"impl Clone for PatternConstructor","synthetic":false,"types":[]},{"text":"impl Clone for PatternTuple","synthetic":false,"types":[]},{"text":"impl Clone for Clause","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]},{"text":"impl Clone for Function","synthetic":false,"types":[]},{"text":"impl Clone for IntImm","synthetic":false,"types":[]},{"text":"impl Clone for Var","synthetic":false,"types":[]},{"text":"impl Clone for Add","synthetic":false,"types":[]},{"text":"impl Clone for Sub","synthetic":false,"types":[]},{"text":"impl Clone for Mul","synthetic":false,"types":[]},{"text":"impl Clone for Div","synthetic":false,"types":[]},{"text":"impl Clone for Mod","synthetic":false,"types":[]},{"text":"impl Clone for FloorDiv","synthetic":false,"types":[]},{"text":"impl Clone for FloorMod","synthetic":false,"types":[]},{"text":"impl Clone for Min","synthetic":false,"types":[]},{"text":"impl Clone for Max","synthetic":false,"types":[]},{"text":"impl Clone for Cast","synthetic":false,"types":[]},{"text":"impl Clone for Ramp","synthetic":false,"types":[]},{"text":"impl Clone for Select","synthetic":false,"types":[]},{"text":"impl Clone for Eq","synthetic":false,"types":[]},{"text":"impl Clone for Ne","synthetic":false,"types":[]},{"text":"impl Clone for Lt","synthetic":false,"types":[]},{"text":"impl Clone for Le","synthetic":false,"types":[]},{"text":"impl Clone for Gt","synthetic":false,"types":[]},{"text":"impl Clone for Ge","synthetic":false,"types":[]},{"text":"impl Clone for And","synthetic":false,"types":[]},{"text":"impl Clone for Or","synthetic":false,"types":[]},{"text":"impl Clone for Not","synthetic":false,"types":[]},{"text":"impl Clone for Let","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for BaseTensorType","synthetic":false,"types":[]},{"text":"impl Clone for TensorType","synthetic":false,"types":[]},{"text":"impl Clone for PassInfo","synthetic":false,"types":[]}];
implementors["tvm_rt"] = [{"text":"impl Clone for ObjectRef","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;IsObject&gt; Clone for ObjectPtr&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for String","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + IsObjectRef&gt; Clone for Array&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Function","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: IsObjectRef,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: IsObjectRef,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Module","synthetic":false,"types":[]},{"text":"impl Clone for NDArray","synthetic":false,"types":[]}];
implementors["tvm_sys"] = [{"text":"impl Clone for __fsid_t","synthetic":false,"types":[]},{"text":"impl Clone for DLContext","synthetic":false,"types":[]},{"text":"impl Clone for DLDataType","synthetic":false,"types":[]},{"text":"impl Clone for DLTensor","synthetic":false,"types":[]},{"text":"impl Clone for DLManagedTensor","synthetic":false,"types":[]},{"text":"impl Clone for TVMValue","synthetic":false,"types":[]},{"text":"impl Clone for TVMByteArray","synthetic":false,"types":[]},{"text":"impl Clone for TVMParallelGroupEnv","synthetic":false,"types":[]},{"text":"impl Clone for DeviceType","synthetic":false,"types":[]},{"text":"impl Clone for Context","synthetic":false,"types":[]},{"text":"impl Clone for DataType","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RetValue","synthetic":false,"types":[]}];
implementors["ucd_trie"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for TrieSetOwned","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TrieSetSlice&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["utf8_ranges"] = [{"text":"impl Clone for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Range","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V:&nbsp;Clone&gt; Clone for VecMap&lt;V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Iter&lt;'a, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Keys&lt;'a, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Values&lt;'a, V&gt;","synthetic":false,"types":[]}];
implementors["zip"] = [{"text":"impl Clone for CompressionMethod","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Read + Seek&gt; Clone for ZipArchive&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for DateTime","synthetic":false,"types":[]},{"text":"impl Clone for FileOptions","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()