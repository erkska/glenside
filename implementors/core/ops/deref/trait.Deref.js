(function() {var implementors = {};
implementors["ansi_term"] = [{"text":"impl&lt;'a, S:&nbsp;'a + ToOwned + ?Sized&gt; Deref for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["anyhow"] = [{"text":"impl Deref for Error","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Deref for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Deref,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Deref&lt;Target = L::Target&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["goblin"] = [{"text":"impl&lt;'a&gt; Deref for Segments&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl Deref for Duration","synthetic":false,"types":[]},{"text":"impl Deref for Timestamp","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;?Sized + 'a&gt; Deref for MutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;?Sized + 'a&gt; Deref for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, G:&nbsp;GetThreadId + 'a, T:&nbsp;?Sized + 'a&gt; Deref for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, G:&nbsp;GetThreadId + 'a, T:&nbsp;?Sized + 'a&gt; Deref for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Deref for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Deref for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLockUpgrade + 'a, T:&nbsp;?Sized + 'a&gt; Deref for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Deref for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Deref for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;T:&nbsp;?Sized, D&gt; Deref for SliceInfo&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Deref for IxDynImpl","synthetic":false,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T, F:&nbsp;FnOnce() -&gt; T&gt; Deref for Lazy&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;FnOnce() -&gt; T&gt; Deref for Lazy&lt;T, F&gt;","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Float&gt; Deref for OrderedFloat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Deref for NotNan&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pyo3"] = [{"text":"impl Deref for PyDateTimeAPI","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PyClass&gt; Deref for PyCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'p, T:&nbsp;PyClass&gt; Deref for PyRef&lt;'p, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'p, T:&nbsp;PyClass&gt; Deref for PyRefMut&lt;'p, T&gt;","synthetic":false,"types":[]},{"text":"impl Deref for PyBool","synthetic":false,"types":[]},{"text":"impl Deref for PyByteArray","synthetic":false,"types":[]},{"text":"impl Deref for PyBytes","synthetic":false,"types":[]},{"text":"impl Deref for PyComplex","synthetic":false,"types":[]},{"text":"impl Deref for PyDate","synthetic":false,"types":[]},{"text":"impl Deref for PyDateTime","synthetic":false,"types":[]},{"text":"impl Deref for PyTime","synthetic":false,"types":[]},{"text":"impl Deref for PyTzInfo","synthetic":false,"types":[]},{"text":"impl Deref for PyDelta","synthetic":false,"types":[]},{"text":"impl Deref for PyDict","synthetic":false,"types":[]},{"text":"impl Deref for PyFloat","synthetic":false,"types":[]},{"text":"impl Deref for PyList","synthetic":false,"types":[]},{"text":"impl Deref for PyModule","synthetic":false,"types":[]},{"text":"impl Deref for PyLong","synthetic":false,"types":[]},{"text":"impl Deref for PySequence","synthetic":false,"types":[]},{"text":"impl Deref for PySet","synthetic":false,"types":[]},{"text":"impl Deref for PyFrozenSet","synthetic":false,"types":[]},{"text":"impl Deref for PySlice","synthetic":false,"types":[]},{"text":"impl Deref for PyString","synthetic":false,"types":[]},{"text":"impl Deref for PyTuple","synthetic":false,"types":[]},{"text":"impl Deref for PyType","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Deref for Literal","synthetic":false,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Deref for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(T),<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Strategy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Deref for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Deref for Underscore","synthetic":false,"types":[]},{"text":"impl Deref for Add","synthetic":false,"types":[]},{"text":"impl Deref for And","synthetic":false,"types":[]},{"text":"impl Deref for At","synthetic":false,"types":[]},{"text":"impl Deref for Bang","synthetic":false,"types":[]},{"text":"impl Deref for Caret","synthetic":false,"types":[]},{"text":"impl Deref for Colon","synthetic":false,"types":[]},{"text":"impl Deref for Comma","synthetic":false,"types":[]},{"text":"impl Deref for Div","synthetic":false,"types":[]},{"text":"impl Deref for Dollar","synthetic":false,"types":[]},{"text":"impl Deref for Dot","synthetic":false,"types":[]},{"text":"impl Deref for Eq","synthetic":false,"types":[]},{"text":"impl Deref for Gt","synthetic":false,"types":[]},{"text":"impl Deref for Lt","synthetic":false,"types":[]},{"text":"impl Deref for Or","synthetic":false,"types":[]},{"text":"impl Deref for Pound","synthetic":false,"types":[]},{"text":"impl Deref for Question","synthetic":false,"types":[]},{"text":"impl Deref for Rem","synthetic":false,"types":[]},{"text":"impl Deref for Semi","synthetic":false,"types":[]},{"text":"impl Deref for Star","synthetic":false,"types":[]},{"text":"impl Deref for Sub","synthetic":false,"types":[]},{"text":"impl Deref for Tilde","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Deref for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]}];
implementors["tvm"] = [{"text":"impl Deref for ConstIntBound","synthetic":false,"types":[]},{"text":"impl Deref for Attrs","synthetic":false,"types":[]},{"text":"impl Deref for BaseExpr","synthetic":false,"types":[]},{"text":"impl Deref for PrimExpr","synthetic":false,"types":[]},{"text":"impl Deref for GlobalVar","synthetic":false,"types":[]},{"text":"impl Deref for BaseFunc","synthetic":false,"types":[]},{"text":"impl Deref for IRModule","synthetic":false,"types":[]},{"text":"impl Deref for Op","synthetic":false,"types":[]},{"text":"impl Deref for Conv2DAttrs","synthetic":false,"types":[]},{"text":"impl Deref for BiasAddAttrs","synthetic":false,"types":[]},{"text":"impl Deref for DenseAttrs","synthetic":false,"types":[]},{"text":"impl Deref for GlobalPool2DAttrs","synthetic":false,"types":[]},{"text":"impl Deref for MaxPool2DAttrs","synthetic":false,"types":[]},{"text":"impl Deref for SoftmaxAttrs","synthetic":false,"types":[]},{"text":"impl Deref for ExpandDimsAttrs","synthetic":false,"types":[]},{"text":"impl Deref for Expr","synthetic":false,"types":[]},{"text":"impl Deref for Id","synthetic":false,"types":[]},{"text":"impl Deref for Constant","synthetic":false,"types":[]},{"text":"impl Deref for Tuple","synthetic":false,"types":[]},{"text":"impl Deref for Var","synthetic":false,"types":[]},{"text":"impl Deref for Call","synthetic":false,"types":[]},{"text":"impl Deref for Let","synthetic":false,"types":[]},{"text":"impl Deref for If","synthetic":false,"types":[]},{"text":"impl Deref for TupleGetItem","synthetic":false,"types":[]},{"text":"impl Deref for RefCreate","synthetic":false,"types":[]},{"text":"impl Deref for RefRead","synthetic":false,"types":[]},{"text":"impl Deref for RefWrite","synthetic":false,"types":[]},{"text":"impl Deref for Constructor","synthetic":false,"types":[]},{"text":"impl Deref for Pattern","synthetic":false,"types":[]},{"text":"impl Deref for PatternWildcard","synthetic":false,"types":[]},{"text":"impl Deref for PatternVar","synthetic":false,"types":[]},{"text":"impl Deref for PatternConstructor","synthetic":false,"types":[]},{"text":"impl Deref for PatternTuple","synthetic":false,"types":[]},{"text":"impl Deref for Clause","synthetic":false,"types":[]},{"text":"impl Deref for Match","synthetic":false,"types":[]},{"text":"impl Deref for Function","synthetic":false,"types":[]},{"text":"impl Deref for IntImm","synthetic":false,"types":[]},{"text":"impl Deref for Var","synthetic":false,"types":[]},{"text":"impl Deref for Add","synthetic":false,"types":[]},{"text":"impl Deref for Sub","synthetic":false,"types":[]},{"text":"impl Deref for Mul","synthetic":false,"types":[]},{"text":"impl Deref for Div","synthetic":false,"types":[]},{"text":"impl Deref for Mod","synthetic":false,"types":[]},{"text":"impl Deref for FloorDiv","synthetic":false,"types":[]},{"text":"impl Deref for FloorMod","synthetic":false,"types":[]},{"text":"impl Deref for Min","synthetic":false,"types":[]},{"text":"impl Deref for Max","synthetic":false,"types":[]},{"text":"impl Deref for Cast","synthetic":false,"types":[]},{"text":"impl Deref for Ramp","synthetic":false,"types":[]},{"text":"impl Deref for Select","synthetic":false,"types":[]},{"text":"impl Deref for Eq","synthetic":false,"types":[]},{"text":"impl Deref for Ne","synthetic":false,"types":[]},{"text":"impl Deref for Lt","synthetic":false,"types":[]},{"text":"impl Deref for Le","synthetic":false,"types":[]},{"text":"impl Deref for Gt","synthetic":false,"types":[]},{"text":"impl Deref for Ge","synthetic":false,"types":[]},{"text":"impl Deref for And","synthetic":false,"types":[]},{"text":"impl Deref for Or","synthetic":false,"types":[]},{"text":"impl Deref for Not","synthetic":false,"types":[]},{"text":"impl Deref for Let","synthetic":false,"types":[]},{"text":"impl Deref for Type","synthetic":false,"types":[]},{"text":"impl Deref for BaseTensorType","synthetic":false,"types":[]},{"text":"impl Deref for TensorType","synthetic":false,"types":[]},{"text":"impl Deref for PassInfo","synthetic":false,"types":[]}];
implementors["tvm_rt"] = [{"text":"impl Deref for ObjectRef","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;IsObject&gt; Deref for ObjectPtr&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Deref for String","synthetic":false,"types":[]},{"text":"impl Deref for NDArray","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()