(function() {var implementors = {};
implementors["ansi_term"] = [{"text":"impl From&lt;Colour&gt; for Style","synthetic":false,"types":[]},{"text":"impl&lt;'a, I, S:&nbsp;'a + ToOwned + ?Sized&gt; From&lt;I&gt; for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Into&lt;Cow&lt;'a, S&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["anyhow"] = [{"text":"impl&lt;E&gt; From&lt;E&gt; for Error <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: StdError + Send + Sync + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Box&lt;dyn StdError + Send + Sync + 'static&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Box&lt;dyn StdError + Send + 'static&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Box&lt;dyn StdError + 'static&gt;","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl&lt;'a, 'b, 'z&gt; From&lt;&amp;'z Arg&lt;'a, 'b&gt;&gt; for Arg&lt;'a, 'b&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'z&gt; From&lt;&amp;'z ArgGroup&lt;'a&gt;&gt; for ArgGroup&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["egg"] = [{"text":"impl&lt;L&gt; From&lt;Vec&lt;L&gt;&gt; for RecExpr&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, L:&nbsp;Language&gt; From&lt;&amp;'a [L]&gt; for Pattern&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, L:&nbsp;Language&gt; From&lt;RecExpr&lt;ENodeOrVar&lt;L&gt;&gt;&gt; for Pattern&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;AsRef&lt;str&gt;&gt; From&lt;S&gt; for Symbol","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for Id","synthetic":false,"types":[]},{"text":"impl From&lt;Id&gt; for usize","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; From&lt;Result&lt;R, L&gt;&gt; for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["env_logger"] = [{"text":"impl&lt;'a, T&gt; From&lt;T&gt; for Env&lt;'a&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;Cow&lt;'a, str&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl From&lt;DecompressError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;CompressError&gt; for Error","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl From&lt;NonZeroU32&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["goblin"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Container&gt; for Ctx","synthetic":false,"types":[]},{"text":"impl From&lt;Endian&gt; for Ctx","synthetic":false,"types":[]},{"text":"impl From&lt;CompressionHeader&gt; for ElfCompressionHeader","synthetic":false,"types":[]},{"text":"impl From&lt;CompressionHeader&gt; for CompressionHeader","synthetic":false,"types":[]},{"text":"impl From&lt;CompressionHeader&gt; for ElfCompressionHeader","synthetic":false,"types":[]},{"text":"impl From&lt;CompressionHeader&gt; for CompressionHeader","synthetic":false,"types":[]},{"text":"impl From&lt;Header&gt; for Header","synthetic":false,"types":[]},{"text":"impl From&lt;Header&gt; for ElfHeader","synthetic":false,"types":[]},{"text":"impl From&lt;Header&gt; for Header","synthetic":false,"types":[]},{"text":"impl From&lt;Header&gt; for ElfHeader","synthetic":false,"types":[]},{"text":"impl From&lt;ProgramHeader&gt; for ElfProgramHeader","synthetic":false,"types":[]},{"text":"impl From&lt;ProgramHeader&gt; for ProgramHeader","synthetic":false,"types":[]},{"text":"impl From&lt;ProgramHeader&gt; for ElfProgramHeader","synthetic":false,"types":[]},{"text":"impl From&lt;ProgramHeader&gt; for ProgramHeader","synthetic":false,"types":[]},{"text":"impl From&lt;SectionHeader&gt; for ElfSectionHeader","synthetic":false,"types":[]},{"text":"impl From&lt;SectionHeader&gt; for SectionHeader","synthetic":false,"types":[]},{"text":"impl From&lt;SectionHeader&gt; for ElfSectionHeader","synthetic":false,"types":[]},{"text":"impl From&lt;SectionHeader&gt; for SectionHeader","synthetic":false,"types":[]},{"text":"impl From&lt;Sym&gt; for ElfSym","synthetic":false,"types":[]},{"text":"impl From&lt;Sym&gt; for Sym","synthetic":false,"types":[]},{"text":"impl From&lt;Sym&gt; for ElfSym","synthetic":false,"types":[]},{"text":"impl From&lt;Sym&gt; for Sym","synthetic":false,"types":[]},{"text":"impl From&lt;Dyn&gt; for Dyn","synthetic":false,"types":[]},{"text":"impl From&lt;Dyn&gt; for ElfDyn","synthetic":false,"types":[]},{"text":"impl From&lt;Dyn&gt; for Dyn","synthetic":false,"types":[]},{"text":"impl From&lt;Dyn&gt; for ElfDyn","synthetic":false,"types":[]},{"text":"impl From&lt;Rela&gt; for Reloc","synthetic":false,"types":[]},{"text":"impl From&lt;Rel&gt; for Reloc","synthetic":false,"types":[]},{"text":"impl From&lt;Reloc&gt; for Rela","synthetic":false,"types":[]},{"text":"impl From&lt;Reloc&gt; for Rel","synthetic":false,"types":[]},{"text":"impl From&lt;Rela&gt; for Reloc","synthetic":false,"types":[]},{"text":"impl From&lt;Rel&gt; for Reloc","synthetic":false,"types":[]},{"text":"impl From&lt;Reloc&gt; for Rela","synthetic":false,"types":[]},{"text":"impl From&lt;Reloc&gt; for Rel","synthetic":false,"types":[]},{"text":"impl From&lt;Header32&gt; for Header","synthetic":false,"types":[]},{"text":"impl From&lt;Header&gt; for Header32","synthetic":false,"types":[]},{"text":"impl From&lt;Header64&gt; for Header","synthetic":false,"types":[]},{"text":"impl From&lt;Header&gt; for Header64","synthetic":false,"types":[]},{"text":"impl From&lt;Section&gt; for Section64","synthetic":false,"types":[]},{"text":"impl From&lt;Section&gt; for Section32","synthetic":false,"types":[]},{"text":"impl From&lt;Section32&gt; for Section","synthetic":false,"types":[]},{"text":"impl From&lt;Section64&gt; for Section","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Segment&lt;'a&gt;&gt; for SegmentCommand64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Segment&lt;'a&gt;&gt; for SegmentCommand32","synthetic":false,"types":[]},{"text":"impl From&lt;Nlist32&gt; for Nlist","synthetic":false,"types":[]},{"text":"impl From&lt;Nlist64&gt; for Nlist","synthetic":false,"types":[]},{"text":"impl From&lt;Nlist&gt; for Nlist32","synthetic":false,"types":[]},{"text":"impl From&lt;Nlist&gt; for Nlist64","synthetic":false,"types":[]},{"text":"impl From&lt;StandardFields32&gt; for StandardFields","synthetic":false,"types":[]},{"text":"impl From&lt;StandardFields64&gt; for StandardFields","synthetic":false,"types":[]},{"text":"impl From&lt;WindowsFields32&gt; for WindowsFields","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl From&lt;Duration&gt; for Duration","synthetic":false,"types":[]},{"text":"impl From&lt;SystemTime&gt; for Timestamp","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;A:&nbsp;IntoIterator&gt; From&lt;(A,)&gt; for Zip&lt;(A::IntoIter,)&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;IntoIterator, B:&nbsp;IntoIterator&gt; From&lt;(A, B)&gt; for Zip&lt;(A::IntoIter, B::IntoIter)&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;IntoIterator, B:&nbsp;IntoIterator, C:&nbsp;IntoIterator&gt; From&lt;(A, B, C)&gt; for Zip&lt;(A::IntoIter, B::IntoIter, C::IntoIter)&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;IntoIterator, B:&nbsp;IntoIterator, C:&nbsp;IntoIterator, D:&nbsp;IntoIterator&gt; From&lt;(A, B, C, D)&gt; for Zip&lt;(A::IntoIter, B::IntoIter, C::IntoIter, D::IntoIter)&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;IntoIterator, B:&nbsp;IntoIterator, C:&nbsp;IntoIterator, D:&nbsp;IntoIterator, E:&nbsp;IntoIterator&gt; From&lt;(A, B, C, D, E)&gt; for Zip&lt;(A::IntoIter, B::IntoIter, C::IntoIter, D::IntoIter, E::IntoIter)&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;IntoIterator, B:&nbsp;IntoIterator, C:&nbsp;IntoIterator, D:&nbsp;IntoIterator, E:&nbsp;IntoIterator, F:&nbsp;IntoIterator&gt; From&lt;(A, B, C, D, E, F)&gt; for Zip&lt;(A::IntoIter, B::IntoIter, C::IntoIter, D::IntoIter, E::IntoIter, F::IntoIter)&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;IntoIterator, B:&nbsp;IntoIterator, C:&nbsp;IntoIterator, D:&nbsp;IntoIterator, E:&nbsp;IntoIterator, F:&nbsp;IntoIterator, G:&nbsp;IntoIterator&gt; From&lt;(A, B, C, D, E, F, G)&gt; for Zip&lt;(A::IntoIter, B::IntoIter, C::IntoIter, D::IntoIter, E::IntoIter, F::IntoIter, G::IntoIter)&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;IntoIterator, B:&nbsp;IntoIterator, C:&nbsp;IntoIterator, D:&nbsp;IntoIterator, E:&nbsp;IntoIterator, F:&nbsp;IntoIterator, G:&nbsp;IntoIterator, H:&nbsp;IntoIterator&gt; From&lt;(A, B, C, D, E, F, G, H)&gt; for Zip&lt;(A::IntoIter, B::IntoIter, C::IntoIter, D::IntoIter, E::IntoIter, F::IntoIter, G::IntoIter, H::IntoIter)&gt;","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;R:&nbsp;RawMutex, T&gt; From&lt;T&gt; for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex, G:&nbsp;GetThreadId, T&gt; From&lt;T&gt; for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock, T&gt; From&lt;T&gt; for RwLock&lt;R, T&gt;","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl From&lt;MZFlush&gt; for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl From&lt;StreamResult&gt; for MZResult","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ StreamResult&gt; for MZResult","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;A, S&gt; From&lt;Vec&lt;A&gt;&gt; for ArrayBase&lt;S, Ix1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = A&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, Slice:&nbsp;?Sized&gt; From&lt;&amp;'a Slice&gt; for ArrayView&lt;'a, A, Ix1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Slice: AsRef&lt;[A]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, S, D&gt; From&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for ArrayView&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, Slice:&nbsp;?Sized&gt; From&lt;&amp;'a mut Slice&gt; for ArrayViewMut&lt;'a, A, Ix1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Slice: AsMut&lt;[A]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, S, D&gt; From&lt;&amp;'a mut ArrayBase&lt;S, D&gt;&gt; for ArrayViewMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataMut&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, V&gt; From&lt;Vec&lt;V&gt;&gt; for Array2&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: FixedInitializer&lt;Elem = A&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, V, U&gt; From&lt;Vec&lt;V&gt;&gt; for Array3&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: FixedInitializer&lt;Elem = U&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: FixedInitializer&lt;Elem = A&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D&gt; From&lt;D&gt; for Shape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, D&gt; From&lt;T&gt; for StrideShape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ShapeBuilder&lt;Dim = D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;Range&lt;isize&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;RangeInclusive&lt;isize&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;RangeFrom&lt;isize&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;RangeTo&lt;isize&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;RangeToInclusive&lt;isize&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;Range&lt;usize&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;RangeInclusive&lt;usize&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;RangeFrom&lt;usize&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;RangeTo&lt;usize&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;RangeToInclusive&lt;usize&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;Range&lt;i32&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;RangeInclusive&lt;i32&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;RangeFrom&lt;i32&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;RangeTo&lt;i32&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;RangeToInclusive&lt;i32&gt;&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;Range&lt;isize&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;RangeInclusive&lt;isize&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;RangeFrom&lt;isize&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;RangeTo&lt;isize&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;RangeToInclusive&lt;isize&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;Range&lt;usize&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;RangeInclusive&lt;usize&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;RangeFrom&lt;usize&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;RangeTo&lt;usize&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;RangeToInclusive&lt;usize&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;Range&lt;i32&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;RangeInclusive&lt;i32&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;RangeFrom&lt;i32&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;RangeTo&lt;i32&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;RangeToInclusive&lt;i32&gt;&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;RangeFull&gt; for Slice","synthetic":false,"types":[]},{"text":"impl From&lt;RangeFull&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;Slice&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;isize&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a [usize]&gt; for IxDynImpl","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;usize&gt;&gt; for IxDynImpl","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; From&lt;ArrayBase&lt;ViewRepr&lt;&amp;'a A&gt;, D&gt;&gt; for CowArray&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; From&lt;ArrayBase&lt;OwnedRepr&lt;A&gt;, D&gt;&gt; for CowArray&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["ndarray_npy"] = [{"text":"impl From&lt;Error&gt; for WriteDataError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for WriteNpyError","synthetic":false,"types":[]},{"text":"impl From&lt;WriteDataError&gt; for WriteNpyError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for ReadDataError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for ReadNpyError","synthetic":false,"types":[]},{"text":"impl From&lt;ReadDataError&gt; for ReadNpyError","synthetic":false,"types":[]},{"text":"impl From&lt;ZipError&gt; for WriteNpzError","synthetic":false,"types":[]},{"text":"impl From&lt;WriteNpyError&gt; for WriteNpzError","synthetic":false,"types":[]},{"text":"impl From&lt;ZipError&gt; for ReadNpzError","synthetic":false,"types":[]},{"text":"impl From&lt;ReadNpyError&gt; for ReadNpzError","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl From&lt;i64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;i128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;i8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;i16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;isize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;u128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;BigUint&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl From&lt;u128&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for BigUint","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Clone + Num&gt; From&lt;T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; From&lt;&amp;'a T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; From&lt;T&gt; for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Float&gt; From&lt;T&gt; for OrderedFloat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;NotNan&lt;f32&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl From&lt;NotNan&lt;f64&gt;&gt; for f64","synthetic":false,"types":[]},{"text":"impl From&lt;NotNan&lt;f32&gt;&gt; for NotNan&lt;f64&gt;","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl From&lt;Span&gt; for Span","synthetic":false,"types":[]},{"text":"impl From&lt;TokenStream&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl From&lt;TokenStream&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl From&lt;Group&gt; for TokenTree","synthetic":false,"types":[]},{"text":"impl From&lt;Ident&gt; for TokenTree","synthetic":false,"types":[]},{"text":"impl From&lt;Punct&gt; for TokenTree","synthetic":false,"types":[]},{"text":"impl From&lt;Literal&gt; for TokenTree","synthetic":false,"types":[]}];
implementors["py_literal"] = [{"text":"impl From&lt;Error&gt; for FormatError","synthetic":false,"types":[]},{"text":"impl From&lt;ParseFloatError&gt; for ParseError","synthetic":false,"types":[]}];
implementors["pyo3"] = [{"text":"impl From&lt;PyDowncastError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;PyErr&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;'static + Send + Debug&gt; From&lt;IntoInnerError&lt;W&gt;&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;Infallible&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;TryFromSliceError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ParseIntError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ParseFloatError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;TryFromIntError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ParseBoolError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;IntoStringError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;NulError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;Utf8Error&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;FromUtf8Error&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;FromUtf16Error&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;DecodeUtf16Error&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;AddrParseError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;BaseException&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;Exception&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;StopAsyncIteration&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;StopIteration&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;GeneratorExit&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ArithmeticError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;LookupError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;AssertionError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;AttributeError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;BufferError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;EOFError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;FloatingPointError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;OSError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ImportError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ModuleNotFoundError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;IndexError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;KeyError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;KeyboardInterrupt&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;MemoryError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;NameError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;OverflowError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;RuntimeError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;RecursionError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;NotImplementedError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;SyntaxError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ReferenceError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;SystemError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;SystemExit&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;TypeError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;UnboundLocalError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;UnicodeError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;UnicodeDecodeError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;UnicodeEncodeError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;UnicodeTranslateError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ValueError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ZeroDivisionError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;BlockingIOError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;BrokenPipeError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ChildProcessError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ConnectionError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ConnectionAbortedError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ConnectionRefusedError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ConnectionResetError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;FileExistsError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;FileNotFoundError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;InterruptedError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;IsADirectoryError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;NotADirectoryError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;PermissionError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ProcessLookupError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;TimeoutError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;EnvironmentError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;IOError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;CancelledError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;InvalidStateError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;TimeoutError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;IncompleteReadError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;LimitOverrunError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;QueueEmpty&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;QueueFull&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;herror&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;gaierror&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;timeout&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;&amp;'a T&gt; for Py&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsPyPointer + PyNativeType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, '_&gt; From&lt;&amp;'_ PyCell&lt;T&gt;&gt; for Py&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PyClass,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;PyRef&lt;'a, T&gt;&gt; for Py&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PyClass,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;PyRefMut&lt;'a, T&gt;&gt; for Py&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PyClass,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;Py&lt;T&gt;&gt; for PyObject","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;&amp;'a T&gt; for PyObject <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsPyPointer + PyNativeType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;&amp;'a mut T&gt; for PyObject <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsPyPointer + PyNativeType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;PanicException&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;PyBorrowError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;PyBorrowMutError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for PyClassInitializer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PyClass,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BaseType: PyTypeInfo&lt;Initializer = PyNativeTypeInitializer&lt;T::BaseType&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, B&gt; From&lt;(S, B)&gt; for PyClassInitializer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: PyClass + PyTypeInfo&lt;BaseType = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::BaseLayout: PySizedLayout&lt;B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: PyClass + PyTypeInfo&lt;Initializer = PyClassInitializer&lt;B&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::BaseType: PyTypeInfo&lt;Initializer = PyNativeTypeInitializer&lt;B::BaseType&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyBool&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyByteArray&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyBytes&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyComplex&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyDate&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyDateTime&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyTime&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyTzInfo&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyDelta&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyDict&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyFloat&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyList&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyModule&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyLong&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PySet&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyFrozenSet&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PySlice&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyString&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyTuple&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyType&gt; for &amp;'a PyAny","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl&lt;X:&nbsp;SampleUniform&gt; From&lt;Range&lt;X&gt;&gt; for Uniform&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;SampleUniform&gt; From&lt;RangeInclusive&lt;X&gt;&gt; for Uniform&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u32&gt;&gt; for IndexVec","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;usize&gt;&gt; for IndexVec","synthetic":false,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl From&lt;ChaCha20Core&gt; for ChaCha20Rng","synthetic":false,"types":[]},{"text":"impl From&lt;ChaCha12Core&gt; for ChaCha12Rng","synthetic":false,"types":[]},{"text":"impl From&lt;ChaCha8Core&gt; for ChaCha8Rng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl From&lt;NonZeroU32&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["scroll"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;bool&gt; for Endian","synthetic":false,"types":[]},{"text":"impl From&lt;Uleb128&gt; for u64","synthetic":false,"types":[]},{"text":"impl From&lt;Sleb128&gt; for i64","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;i8&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;i16&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;isize&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;f32&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;f64&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;bool&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Cow&lt;'a, str&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;Map&lt;String, Value&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Into&lt;Value&gt;&gt; From&lt;Vec&lt;T&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Into&lt;Value&gt;&gt; From&lt;&amp;'a [T]&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;()&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;i8&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;i16&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;isize&gt; for Number","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl From&lt;LayoutErr&gt; for CollectionAllocErr","synthetic":false,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Array&gt; From&lt;&amp;'a [&lt;A as Array&gt;::Item]&gt; for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; From&lt;Vec&lt;&lt;A as Array&gt;::Item&gt;&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; From&lt;A&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["symbolic_expressions"] = [{"text":"impl From&lt;Error&gt; for SexpError","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for SexpError","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for SexpError","synthetic":false,"types":[]},{"text":"impl From&lt;FromUtf8Error&gt; for SexpError","synthetic":false,"types":[]},{"text":"impl From&lt;ParseFloatError&gt; for SexpError","synthetic":false,"types":[]},{"text":"impl From&lt;ParseIntError&gt; for SexpError","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Sexp","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a String&gt; for Sexp","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;(&amp;'a str, Sexp)&gt; for Sexp","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Display&gt; From&lt;(&amp;'a str, &amp;'a T)&gt; for Sexp","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl From&lt;SelfValue&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;SelfType&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Super&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Crate&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Extern&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Underscore&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Path&gt; for Meta","synthetic":false,"types":[]},{"text":"impl From&lt;MetaList&gt; for Meta","synthetic":false,"types":[]},{"text":"impl From&lt;MetaNameValue&gt; for Meta","synthetic":false,"types":[]},{"text":"impl From&lt;Meta&gt; for NestedMeta","synthetic":false,"types":[]},{"text":"impl From&lt;Lit&gt; for NestedMeta","synthetic":false,"types":[]},{"text":"impl From&lt;FieldsNamed&gt; for Fields","synthetic":false,"types":[]},{"text":"impl From&lt;FieldsUnnamed&gt; for Fields","synthetic":false,"types":[]},{"text":"impl From&lt;VisPublic&gt; for Visibility","synthetic":false,"types":[]},{"text":"impl From&lt;VisCrate&gt; for Visibility","synthetic":false,"types":[]},{"text":"impl From&lt;VisRestricted&gt; for Visibility","synthetic":false,"types":[]},{"text":"impl From&lt;ExprArray&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAssign&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAssignOp&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAsync&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAwait&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBinary&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBlock&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBox&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBreak&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprCall&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprCast&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprClosure&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprContinue&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprField&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprForLoop&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprGroup&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprIf&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprIndex&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprLet&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprLit&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprLoop&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprMacro&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprMatch&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprMethodCall&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprParen&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprPath&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprRange&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprReference&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprRepeat&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprReturn&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprStruct&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprTry&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprTryBlock&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprTuple&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprType&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprUnary&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprUnsafe&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprWhile&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprYield&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for Index","synthetic":false,"types":[]},{"text":"impl From&lt;TypeParam&gt; for GenericParam","synthetic":false,"types":[]},{"text":"impl From&lt;LifetimeDef&gt; for GenericParam","synthetic":false,"types":[]},{"text":"impl From&lt;ConstParam&gt; for GenericParam","synthetic":false,"types":[]},{"text":"impl From&lt;Ident&gt; for TypeParam","synthetic":false,"types":[]},{"text":"impl From&lt;TraitBound&gt; for TypeParamBound","synthetic":false,"types":[]},{"text":"impl From&lt;Lifetime&gt; for TypeParamBound","synthetic":false,"types":[]},{"text":"impl From&lt;PredicateType&gt; for WherePredicate","synthetic":false,"types":[]},{"text":"impl From&lt;PredicateLifetime&gt; for WherePredicate","synthetic":false,"types":[]},{"text":"impl From&lt;PredicateEq&gt; for WherePredicate","synthetic":false,"types":[]},{"text":"impl From&lt;ItemConst&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemEnum&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemExternCrate&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemFn&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemForeignMod&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemImpl&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemMacro&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemMacro2&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemMod&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemStatic&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemStruct&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemTrait&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemTraitAlias&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemType&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemUnion&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemUse&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;DeriveInput&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemStruct&gt; for DeriveInput","synthetic":false,"types":[]},{"text":"impl From&lt;ItemEnum&gt; for DeriveInput","synthetic":false,"types":[]},{"text":"impl From&lt;ItemUnion&gt; for DeriveInput","synthetic":false,"types":[]},{"text":"impl From&lt;UsePath&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseName&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseRename&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseGlob&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseGroup&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemFn&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemStatic&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemType&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemMacro&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemConst&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemMethod&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemType&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemMacro&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemConst&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemMethod&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemType&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemMacro&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;Receiver&gt; for FnArg","synthetic":false,"types":[]},{"text":"impl From&lt;PatType&gt; for FnArg","synthetic":false,"types":[]},{"text":"impl From&lt;LitStr&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitByteStr&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitByte&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitChar&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitInt&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitFloat&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitBool&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;Literal&gt; for LitInt","synthetic":false,"types":[]},{"text":"impl From&lt;Literal&gt; for LitFloat","synthetic":false,"types":[]},{"text":"impl From&lt;DataStruct&gt; for Data","synthetic":false,"types":[]},{"text":"impl From&lt;DataEnum&gt; for Data","synthetic":false,"types":[]},{"text":"impl From&lt;DataUnion&gt; for Data","synthetic":false,"types":[]},{"text":"impl From&lt;TypeArray&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeBareFn&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeGroup&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeImplTrait&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeInfer&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeMacro&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeNever&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeParen&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypePath&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypePtr&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeReference&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeSlice&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeTraitObject&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeTuple&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;PatBox&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatIdent&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatLit&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatMacro&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatOr&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatPath&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatRange&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatReference&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatRest&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatSlice&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatStruct&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatTuple&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatTupleStruct&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatType&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatWild&gt; for Pat","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Path <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;PathSegment&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for PathSegment <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;Ident&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;LexError&gt; for Error","synthetic":false,"types":[]}];
implementors["tvm"] = [{"text":"impl From&lt;ConstIntBoundNode&gt; for ConstIntBound","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;ConstIntBoundNode&gt;&gt; for ConstIntBound","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;ConstIntBound&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ ConstIntBound&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;ConstIntBound&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;BaseAttrsNode&gt; for Attrs","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;BaseAttrsNode&gt;&gt; for Attrs","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Attrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Attrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Attrs&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;BaseExprNode&gt; for BaseExpr","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;BaseExprNode&gt;&gt; for BaseExpr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;BaseExpr&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ BaseExpr&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;BaseExpr&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;PrimExprNode&gt; for PrimExpr","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;PrimExprNode&gt;&gt; for PrimExpr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;PrimExpr&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ PrimExpr&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;PrimExpr&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;GlobalVarNode&gt; for GlobalVar","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;GlobalVarNode&gt;&gt; for GlobalVar","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;GlobalVar&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ GlobalVar&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;GlobalVar&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;BaseFuncNode&gt; for BaseFunc","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;BaseFuncNode&gt;&gt; for BaseFunc","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;BaseFunc&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ BaseFunc&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;BaseFunc&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;IRModuleNode&gt; for IRModule","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;IRModuleNode&gt;&gt; for IRModule","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;IRModule&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ IRModule&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;IRModule&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;OpNode&gt; for Op","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;OpNode&gt;&gt; for Op","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Op&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Op&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Op&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;Conv2DAttrsNode&gt; for Conv2DAttrs","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;Conv2DAttrsNode&gt;&gt; for Conv2DAttrs","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Conv2DAttrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Conv2DAttrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Conv2DAttrs&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;BiasAddAttrsNode&gt; for BiasAddAttrs","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;BiasAddAttrsNode&gt;&gt; for BiasAddAttrs","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;BiasAddAttrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ BiasAddAttrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;BiasAddAttrs&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;DenseAttrsNode&gt; for DenseAttrs","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;DenseAttrsNode&gt;&gt; for DenseAttrs","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;DenseAttrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ DenseAttrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;DenseAttrs&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;GlobalPool2DAttrsNode&gt; for GlobalPool2DAttrs","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;GlobalPool2DAttrsNode&gt;&gt; for GlobalPool2DAttrs","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;GlobalPool2DAttrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ GlobalPool2DAttrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;GlobalPool2DAttrs&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;MaxPool2DAttrsNode&gt; for MaxPool2DAttrs","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;MaxPool2DAttrsNode&gt;&gt; for MaxPool2DAttrs","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;MaxPool2DAttrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ MaxPool2DAttrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;MaxPool2DAttrs&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;SoftmaxAttrsNode&gt; for SoftmaxAttrs","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;SoftmaxAttrsNode&gt;&gt; for SoftmaxAttrs","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;SoftmaxAttrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ SoftmaxAttrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;SoftmaxAttrs&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;ExpandDimsAttrsNode&gt; for ExpandDimsAttrs","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;ExpandDimsAttrsNode&gt;&gt; for ExpandDimsAttrs","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;ExpandDimsAttrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ ExpandDimsAttrs&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;ExpandDimsAttrs&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;ExprNode&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;ExprNode&gt;&gt; for Expr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Expr&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Expr&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Expr&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;IdNode&gt; for Id","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;IdNode&gt;&gt; for Id","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Id&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Id&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Id&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;ConstantNode&gt; for Constant","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;ConstantNode&gt;&gt; for Constant","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Constant&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Constant&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Constant&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;TupleNode&gt; for Tuple","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;TupleNode&gt;&gt; for Tuple","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Tuple&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Tuple&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Tuple&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;VarNode&gt; for Var","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;VarNode&gt;&gt; for Var","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Var&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Var&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Var&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;CallNode&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;CallNode&gt;&gt; for Call","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Call&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Call&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Call&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;LetNode&gt; for Let","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;LetNode&gt;&gt; for Let","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Let&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Let&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Let&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;IfNode&gt; for If","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;IfNode&gt;&gt; for If","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;If&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ If&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;If&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;TupleGetItemNode&gt; for TupleGetItem","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;TupleGetItemNode&gt;&gt; for TupleGetItem","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;TupleGetItem&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ TupleGetItem&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;TupleGetItem&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;RefCreateNode&gt; for RefCreate","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;RefCreateNode&gt;&gt; for RefCreate","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;RefCreate&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ RefCreate&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;RefCreate&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;RefReadNode&gt; for RefRead","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;RefReadNode&gt;&gt; for RefRead","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;RefRead&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ RefRead&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;RefRead&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;RefWriteNode&gt; for RefWrite","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;RefWriteNode&gt;&gt; for RefWrite","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;RefWrite&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ RefWrite&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;RefWrite&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;ConstructorNode&gt; for Constructor","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;ConstructorNode&gt;&gt; for Constructor","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Constructor&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Constructor&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Constructor&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;PatternNode&gt; for Pattern","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;PatternNode&gt;&gt; for Pattern","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Pattern&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Pattern&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Pattern&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;PatternWildcardNode&gt; for PatternWildcard","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;PatternWildcardNode&gt;&gt; for PatternWildcard","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;PatternWildcard&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ PatternWildcard&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;PatternWildcard&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;PatternVarNode&gt; for PatternVar","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;PatternVarNode&gt;&gt; for PatternVar","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;PatternVar&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ PatternVar&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;PatternVar&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;PatternConstructorNode&gt; for PatternConstructor","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;PatternConstructorNode&gt;&gt; for PatternConstructor","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;PatternConstructor&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ PatternConstructor&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;PatternConstructor&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;PatternTupleNode&gt; for PatternTuple","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;PatternTupleNode&gt;&gt; for PatternTuple","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;PatternTuple&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ PatternTuple&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;PatternTuple&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;ClauseNode&gt; for Clause","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;ClauseNode&gt;&gt; for Clause","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Clause&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Clause&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Clause&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;MatchNode&gt; for Match","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;MatchNode&gt;&gt; for Match","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Match&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Match&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Match&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;FunctionNode&gt; for Function","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;FunctionNode&gt;&gt; for Function","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Function&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Function&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Function&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;IntImmNode&gt; for IntImm","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;IntImmNode&gt;&gt; for IntImm","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;IntImm&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ IntImm&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;IntImm&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;VarNode&gt; for Var","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;VarNode&gt;&gt; for Var","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Var&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Var&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Var&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;AddNode&gt; for Add","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;AddNode&gt;&gt; for Add","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Add&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Add&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Add&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;SubNode&gt; for Sub","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;SubNode&gt;&gt; for Sub","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Sub&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Sub&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Sub&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;MulNode&gt; for Mul","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;MulNode&gt;&gt; for Mul","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Mul&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Mul&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Mul&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;DivNode&gt; for Div","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;DivNode&gt;&gt; for Div","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Div&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Div&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Div&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;ModNode&gt; for Mod","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;ModNode&gt;&gt; for Mod","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Mod&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Mod&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Mod&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;FloorDivNode&gt; for FloorDiv","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;FloorDivNode&gt;&gt; for FloorDiv","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;FloorDiv&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ FloorDiv&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;FloorDiv&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;FloorModNode&gt; for FloorMod","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;FloorModNode&gt;&gt; for FloorMod","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;FloorMod&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ FloorMod&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;FloorMod&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;MinNode&gt; for Min","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;MinNode&gt;&gt; for Min","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Min&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Min&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Min&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;MaxNode&gt; for Max","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;MaxNode&gt;&gt; for Max","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Max&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Max&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Max&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;CastNode&gt; for Cast","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;CastNode&gt;&gt; for Cast","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Cast&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Cast&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Cast&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;RampNode&gt; for Ramp","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;RampNode&gt;&gt; for Ramp","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Ramp&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Ramp&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Ramp&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;SelectNode&gt; for Select","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;SelectNode&gt;&gt; for Select","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Select&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Select&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Select&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;EqNode&gt; for Eq","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;EqNode&gt;&gt; for Eq","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Eq&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Eq&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Eq&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;NeNode&gt; for Ne","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;NeNode&gt;&gt; for Ne","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Ne&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Ne&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Ne&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;LtNode&gt; for Lt","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;LtNode&gt;&gt; for Lt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Lt&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Lt&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Lt&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;LeNode&gt; for Le","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;LeNode&gt;&gt; for Le","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Le&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Le&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Le&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;GtNode&gt; for Gt","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;GtNode&gt;&gt; for Gt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Gt&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Gt&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Gt&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;GeNode&gt; for Ge","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;GeNode&gt;&gt; for Ge","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Ge&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Ge&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Ge&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;AndNode&gt; for And","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;AndNode&gt;&gt; for And","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;And&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ And&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;And&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;OrNode&gt; for Or","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;OrNode&gt;&gt; for Or","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Or&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Or&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Or&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;NotNode&gt; for Not","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;NotNode&gt;&gt; for Not","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Not&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Not&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Not&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;LetNode&gt; for Let","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;LetNode&gt;&gt; for Let","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Let&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Let&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Let&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;TypeNode&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;TypeNode&gt;&gt; for Type","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Type&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ Type&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Type&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;BaseTensorTypeNode&gt; for BaseTensorType","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;BaseTensorTypeNode&gt;&gt; for BaseTensorType","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;BaseTensorType&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ BaseTensorType&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;BaseTensorType&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;TensorTypeNode&gt; for TensorType","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;TensorTypeNode&gt;&gt; for TensorType","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;TensorType&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ TensorType&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;TensorType&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;PassInfoNode&gt; for PassInfo","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;PassInfoNode&gt;&gt; for PassInfo","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;PassInfo&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ PassInfo&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;PassInfo&gt; for RetValue","synthetic":false,"types":[]}];
implementors["tvm_rt"] = [{"text":"impl From&lt;Object&gt; for ObjectRef","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;Object&gt;&gt; for ObjectRef","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;ObjectRef&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ ObjectRef&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectRef&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;IsObject&gt; From&lt;ObjectPtr&lt;T&gt;&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;IsObject&gt; From&lt;ObjectPtr&lt;T&gt;&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;StringObj&gt; for String","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;StringObj&gt;&gt; for String","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;String&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ String&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for String","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'static str&gt; for String","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;IsObjectRef&gt; From&lt;Array&lt;T&gt;&gt; for ArgValue&lt;'static&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;IsObjectRef&gt; From&lt;Array&lt;T&gt;&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;ParseDataTypeError&gt; for NDArrayError","synthetic":false,"types":[]},{"text":"impl From&lt;ShapeError&gt; for NDArrayError","synthetic":false,"types":[]},{"text":"impl From&lt;ValueDowncastError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;NulError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;IntoStringError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;NDArrayError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Infallible&gt; for Error","synthetic":false,"types":[]},{"text":"impl&lt;Err, Out, T1, T2, T3, T4, T5, T6&gt; From&lt;Function&gt; for Box&lt;dyn Fn(T1, T2, T3, T4, T5, T6) -&gt; Result&lt;Out&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: From&lt;Err&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Out: TryFrom&lt;RetValue, Error = Err&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T1: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T2: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T3: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T4: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T5: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T6: Into&lt;ArgValue&lt;'static&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Err, Out, T2, T3, T4, T5, T6&gt; From&lt;Function&gt; for Box&lt;dyn Fn(T2, T3, T4, T5, T6) -&gt; Result&lt;Out&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: From&lt;Err&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Out: TryFrom&lt;RetValue, Error = Err&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T2: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T3: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T4: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T5: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T6: Into&lt;ArgValue&lt;'static&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Err, Out, T3, T4, T5, T6&gt; From&lt;Function&gt; for Box&lt;dyn Fn(T3, T4, T5, T6) -&gt; Result&lt;Out&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: From&lt;Err&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Out: TryFrom&lt;RetValue, Error = Err&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T3: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T4: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T5: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T6: Into&lt;ArgValue&lt;'static&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Err, Out, T4, T5, T6&gt; From&lt;Function&gt; for Box&lt;dyn Fn(T4, T5, T6) -&gt; Result&lt;Out&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: From&lt;Err&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Out: TryFrom&lt;RetValue, Error = Err&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T4: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T5: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T6: Into&lt;ArgValue&lt;'static&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Err, Out, T5, T6&gt; From&lt;Function&gt; for Box&lt;dyn Fn(T5, T6) -&gt; Result&lt;Out&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: From&lt;Err&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Out: TryFrom&lt;RetValue, Error = Err&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T5: Into&lt;ArgValue&lt;'static&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T6: Into&lt;ArgValue&lt;'static&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Err, Out, T6&gt; From&lt;Function&gt; for Box&lt;dyn Fn(T6) -&gt; Result&lt;Out&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: From&lt;Err&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Out: TryFrom&lt;RetValue, Error = Err&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T6: Into&lt;ArgValue&lt;'static&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Err, Out&gt; From&lt;Function&gt; for Box&lt;dyn Fn() -&gt; Result&lt;Out&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: From&lt;Err&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Out: TryFrom&lt;RetValue, Error = Err&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;Function&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Function&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S&gt; From&lt;Map&lt;K, V&gt;&gt; for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: IsObjectRef,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: IsObjectRef,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; From&lt;Map&lt;K, V&gt;&gt; for ArgValue&lt;'a&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: IsObjectRef,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: IsObjectRef,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; From&lt;Map&lt;K, V&gt;&gt; for RetValue <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: IsObjectRef,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: IsObjectRef,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;NDArrayContainer&gt; for NDArray","synthetic":false,"types":[]},{"text":"impl From&lt;ObjectPtr&lt;NDArrayContainer&gt;&gt; for NDArray","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;NDArray&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ NDArray&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;NDArray&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Module&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a mut Module&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Module&gt; for RetValue","synthetic":false,"types":[]}];
implementors["tvm_sys"] = [{"text":"impl&lt;'a, D:&nbsp;Dimension&gt; From&lt;&amp;'a mut ArrayBase&lt;OwnedRepr&lt;f32&gt;, D&gt;&gt; for DLTensor","synthetic":false,"types":[]},{"text":"impl&lt;'a, D:&nbsp;Dimension&gt; From&lt;&amp;'a mut ArrayBase&lt;OwnedRepr&lt;f64&gt;, D&gt;&gt; for DLTensor","synthetic":false,"types":[]},{"text":"impl&lt;'a, D:&nbsp;Dimension&gt; From&lt;&amp;'a mut ArrayBase&lt;OwnedRepr&lt;i32&gt;, D&gt;&gt; for DLTensor","synthetic":false,"types":[]},{"text":"impl&lt;'a, D:&nbsp;Dimension&gt; From&lt;&amp;'a mut ArrayBase&lt;OwnedRepr&lt;i64&gt;, D&gt;&gt; for DLTensor","synthetic":false,"types":[]},{"text":"impl&lt;'a, D:&nbsp;Dimension&gt; From&lt;&amp;'a mut ArrayBase&lt;OwnedRepr&lt;u32&gt;, D&gt;&gt; for DLTensor","synthetic":false,"types":[]},{"text":"impl&lt;'a, D:&nbsp;Dimension&gt; From&lt;&amp;'a mut ArrayBase&lt;OwnedRepr&lt;u64&gt;, D&gt;&gt; for DLTensor","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; From&lt;T&gt; for ByteArray","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a ByteArray&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;ByteArray&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;DeviceType&gt; for DLDeviceType","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for DeviceType","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for DeviceType","synthetic":false,"types":[]},{"text":"impl&lt;'a, '_&gt; From&lt;&amp;'_ DeviceType&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Context&gt; for DLContext","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Context","synthetic":false,"types":[]},{"text":"impl From&lt;DLContext&gt; for Context","synthetic":false,"types":[]},{"text":"impl From&lt;Context&gt; for DLContext","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Context&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Context&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Context&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a DataType&gt; for DLDataType","synthetic":false,"types":[]},{"text":"impl From&lt;DLDataType&gt; for DataType","synthetic":false,"types":[]},{"text":"impl From&lt;DataType&gt; for DLDataType","synthetic":false,"types":[]},{"text":"impl From&lt;DataType&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;i8&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'v&gt; From&lt;&amp;'a i8&gt; for ArgValue&lt;'v&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;i8&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;i16&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'v&gt; From&lt;&amp;'a i16&gt; for ArgValue&lt;'v&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;i16&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;i32&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'v&gt; From&lt;&amp;'a i32&gt; for ArgValue&lt;'v&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;i64&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'v&gt; From&lt;&amp;'a i64&gt; for ArgValue&lt;'v&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;isize&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'v&gt; From&lt;&amp;'a isize&gt; for ArgValue&lt;'v&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;isize&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;u8&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'v&gt; From&lt;&amp;'a u8&gt; for ArgValue&lt;'v&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;u16&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'v&gt; From&lt;&amp;'a u16&gt; for ArgValue&lt;'v&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;u32&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'v&gt; From&lt;&amp;'a u32&gt; for ArgValue&lt;'v&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;u64&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'v&gt; From&lt;&amp;'a u64&gt; for ArgValue&lt;'v&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;usize&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'v&gt; From&lt;&amp;'a usize&gt; for ArgValue&lt;'v&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;f32&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'v&gt; From&lt;&amp;'a f32&gt; for ArgValue&lt;'v&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;f32&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;f64&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'v&gt; From&lt;&amp;'a f64&gt; for ArgValue&lt;'v&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;f64&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;DLDataType&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'v&gt; From&lt;&amp;'a DLDataType&gt; for ArgValue&lt;'v&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;DLDataType&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;DLContext&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'v&gt; From&lt;&amp;'a DLContext&gt; for ArgValue&lt;'v&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;DLContext&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;String&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a CStr&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;CString&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a TVMByteArray&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;*const T&gt; for ArgValue&lt;'static&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;*mut T&gt; for ArgValue&lt;'static&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a mut DLTensor&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a DLTensor&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMByteArray&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;bool&gt; for ArgValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;bool&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;()&gt; for RetValue","synthetic":false,"types":[]},{"text":"impl From&lt;i8&gt; for TVMValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMValue&gt; for i8","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for TVMValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMValue&gt; for u8","synthetic":false,"types":[]},{"text":"impl From&lt;i16&gt; for TVMValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMValue&gt; for i16","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for TVMValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMValue&gt; for u16","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for TVMValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMValue&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for TVMValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMValue&gt; for u32","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for TVMValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMValue&gt; for i64","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for TVMValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMValue&gt; for u64","synthetic":false,"types":[]},{"text":"impl From&lt;isize&gt; for TVMValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMValue&gt; for isize","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for TVMValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMValue&gt; for usize","synthetic":false,"types":[]},{"text":"impl From&lt;f32&gt; for TVMValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMValue&gt; for f32","synthetic":false,"types":[]},{"text":"impl From&lt;f64&gt; for TVMValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMValue&gt; for f64","synthetic":false,"types":[]},{"text":"impl From&lt;DLDataType&gt; for TVMValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMValue&gt; for DLDataType","synthetic":false,"types":[]},{"text":"impl From&lt;DLContext&gt; for TVMValue","synthetic":false,"types":[]},{"text":"impl From&lt;TVMValue&gt; for TVMContext","synthetic":false,"types":[]}];
implementors["ucd_trie"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["zip"] = [{"text":"impl From&lt;Error&gt; for ZipError","synthetic":false,"types":[]},{"text":"impl From&lt;ZipError&gt; for Error","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()