(function() {var implementors = {};
implementors["byteorder"] = [{"text":"impl Ord for BigEndian","synthetic":false,"types":[]},{"text":"impl Ord for LittleEndian","synthetic":false,"types":[]}];
implementors["egg"] = [{"text":"impl&lt;L:&nbsp;Ord&gt; Ord for RecExpr&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl Ord for SymbolLang","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Ord&gt; Ord for ENodeOrVar&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Var","synthetic":false,"types":[]},{"text":"impl Ord for Subst","synthetic":false,"types":[]},{"text":"impl Ord for Symbol","synthetic":false,"types":[]},{"text":"impl Ord for Id","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Ord, R:&nbsp;Ord&gt; Ord for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["glenside"] = [{"text":"impl Ord for Language","synthetic":false,"types":[]},{"text":"impl Ord for ComputeType","synthetic":false,"types":[]},{"text":"impl Ord for PadType","synthetic":false,"types":[]}];
implementors["goblin"] = [{"text":"impl Ord for Register","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Ord for LogLevel","synthetic":false,"types":[]},{"text":"impl Ord for LogLevelFilter","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl Ord for Axis","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Ord for Sign","synthetic":false,"types":[]},{"text":"impl Ord for BigInt","synthetic":false,"types":[]},{"text":"impl Ord for BigUint","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Float&gt; Ord for OrderedFloat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Ord for NotNan&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pest"] = [{"text":"impl&lt;'i&gt; Ord for Position&lt;'i&gt;","synthetic":false,"types":[]}];
implementors["pest_meta"] = [{"text":"impl Ord for Rule","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Ord for Ident","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Ord for Span","synthetic":false,"types":[]},{"text":"impl Ord for Position","synthetic":false,"types":[]},{"text":"impl Ord for Literal","synthetic":false,"types":[]},{"text":"impl Ord for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Ord for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Ord for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Ord for Utf8Range","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Ord for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Ord,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Ord for Lifetime","synthetic":false,"types":[]}];
implementors["tvm_rt"] = [{"text":"impl Ord for String","synthetic":false,"types":[]}];
implementors["tvm_sys"] = [{"text":"impl Ord for DataType","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V:&nbsp;Ord&gt; Ord for VecMap&lt;V&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()