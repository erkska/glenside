(function() {var implementors = {};
implementors["byteorder"] = [{"text":"impl PartialOrd&lt;BigEndian&gt; for BigEndian","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LittleEndian&gt; for LittleEndian","synthetic":false,"types":[]}];
implementors["egg"] = [{"text":"impl&lt;L:&nbsp;PartialOrd&gt; PartialOrd&lt;RecExpr&lt;L&gt;&gt; for RecExpr&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;SymbolLang&gt; for SymbolLang","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;PartialOrd&gt; PartialOrd&lt;ENodeOrVar&lt;L&gt;&gt; for ENodeOrVar&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Var&gt; for Var","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Subst&gt; for Subst","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Symbol&gt; for Symbol","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Id&gt; for Id","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;PartialOrd, R:&nbsp;PartialOrd&gt; PartialOrd&lt;Either&lt;L, R&gt;&gt; for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["glenside"] = [{"text":"impl PartialOrd&lt;Language&gt; for Language","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;ComputeType&gt; for ComputeType","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;PadType&gt; for PadType","synthetic":false,"types":[]}];
implementors["goblin"] = [{"text":"impl PartialOrd&lt;Register&gt; for Register","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl PartialOrd&lt;LogLevel&gt; for LogLevel","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LogLevelFilter&gt; for LogLevel","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LogLevelFilter&gt; for LogLevelFilter","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LogLevel&gt; for LogLevelFilter","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl PartialOrd&lt;Axis&gt; for Axis","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl PartialOrd&lt;Sign&gt; for Sign","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;BigInt&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;BigUint&gt; for BigUint","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Float&gt; PartialOrd&lt;OrderedFloat&lt;T&gt;&gt; for OrderedFloat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PartialOrd&gt; PartialOrd&lt;NotNan&lt;T&gt;&gt; for NotNan&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pest"] = [{"text":"impl&lt;'i&gt; PartialOrd&lt;Position&lt;'i&gt;&gt; for Position&lt;'i&gt;","synthetic":false,"types":[]}];
implementors["pest_meta"] = [{"text":"impl PartialOrd&lt;Rule&gt; for Rule","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl PartialOrd&lt;Ident&gt; for Ident","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl PartialOrd&lt;Span&gt; for Span","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Position&gt; for Position","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Literal&gt; for Literal","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;ClassUnicodeRange&gt; for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;ClassBytesRange&gt; for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Utf8Sequence&gt; for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Utf8Range&gt; for Utf8Range","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; PartialOrd&lt;SmallVec&lt;A&gt;&gt; for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: PartialOrd,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl PartialOrd&lt;Lifetime&gt; for Lifetime","synthetic":false,"types":[]}];
implementors["tvm_rt"] = [{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; PartialOrd&lt;T&gt; for String","synthetic":false,"types":[]}];
implementors["tvm_sys"] = [{"text":"impl PartialOrd&lt;DataType&gt; for DataType","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V:&nbsp;PartialOrd&gt; PartialOrd&lt;VecMap&lt;V&gt;&gt; for VecMap&lt;V&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()